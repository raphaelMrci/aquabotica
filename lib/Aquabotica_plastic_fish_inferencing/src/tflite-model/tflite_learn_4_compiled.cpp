/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 30.01.2025 14:39:56

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 16884, -24354, -33168, -28313, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00029974497738294303, 0.00021861158893443644, 0.00021918660786468536, 0.00024362314434256405, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 22,-39,-49,-51,112,-44,-3,-41,105,-21,59,92,-78,-30,11,-11,4,-49,-84,59,-5,60,-32,94,3,18,-3,29,127,-39,42,9, 
  /* [1][0][][] */ 76,85,-98,-9,-44,44,126,44,-50,-74,-98,-4,100,-57,114,-127,126,-111,25,-64,14,-88,-82,-38,-5,-106,66,-60,-98,-119,-24,-24, 
  /* [2][0][][] */ -58,103,23,103,-64,-11,101,44,-105,-127,98,-84,-97,94,-117,73,55,75,97,-75,-13,14,-61,-71,42,-60,94,-99,-56,10,70,51, 
  /* [3][0][][] */ 70,-74,62,8,-15,113,47,-6,-5,-93,35,56,80,-3,-120,-26,110,-101,98,-34,-127,-21,-27,-51,85,-23,-94,84,-85,116,27,54, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0040680607780814171, 0.0029669394716620445, 0.0029747434891760349, 0.0033063897863030434, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 194, -157, 103, -101, -58, -31, -187, -173, 185, -243, 18, -46, 57, -149, -322, 48, -94, 119, -51, 154, 305, 608, 517, 1349, 140, 705, -134, -361, 1563, -36, -354, -260, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4486601836979389e-05, 4.3817060941364616e-05, 4.0848688513506204e-05, 4.4846292439615354e-05, 5.0588554586283863e-05, 4.2440988181624562e-05, 4.3493197154020891e-05, 4.5490200136555359e-05, 4.6629313146695495e-05, 4.1177554521709681e-05, 4.2941297579091042e-05, 5.8397738030180335e-05, 4.3078467570012435e-05, 4.1688232158776373e-05, 4.1604882426327094e-05, 4.5269403926795349e-05, 4.2605770431691781e-05, 5.1467424782458693e-05, 4.1347735532326624e-05, 4.683189035858959e-05, 4.3786953028757125e-05, 4.4525506382342428e-05, 4.7077977797016501e-05, 5.3678624681197107e-05, 5.4717991588404402e-05, 4.6028166252654046e-05, 4.2749710701173171e-05, 4.0996783354785293e-05, 4.9892798415385187e-05, 4.4344840716803446e-05, 4.1555103962309659e-05, 4.9164020310854539e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -23,-48,102,6,93,-17,-80,-90,66,-102,-100,15,33,22,-26,63,-54,-24,-82,-33,-67,-98,0,109,-106,11,80,-46,117,-28,-11,-77,91,-55,-96,59,-113,-65,-86,32,84,-88,-96,106,66,-93,118,-8,32,-45,-31,108,-79,-40,-84,113,26,70,101,-103,-56,81,-44,35,-10,24,70,92,62,85,51,-118,97,-74,37,79,-126,3,-54,30,63,35,89,2,-47,-27,-81,109,29,127,-17,-126,33,50,49,17, 
  /* [1][0][][] */ -50,33,-81,-4,-30,77,34,11,81,-92,-104,97,83,-20,23,64,98,-39,27,114,-40,-11,28,23,37,-1,-43,93,-1,-14,98,-56,68,110,-13,30,35,63,-11,-64,-61,7,-23,-99,-32,39,-29,-54,-20,-106,127,63,5,94,-77,-49,50,88,45,80,-43,97,-62,-80,-47,34,69,44,106,29,6,18,-122,94,-44,37,82,-56,-43,66,-79,86,-39,-110,26,116,-77,-63,84,82,78,34,90,73,34,2, 
  /* [2][0][][] */ 48,40,-54,99,-4,-50,91,111,-111,92,-36,116,119,-24,88,-125,-54,-33,38,77,-100,-16,121,24,-21,98,104,15,-61,115,83,100,-82,-22,-88,-105,-80,101,127,-28,-122,-73,15,2,-90,124,-23,-78,99,63,90,-83,-43,65,40,28,-81,87,-49,1,-31,80,-11,73,110,47,51,90,-90,69,38,-70,46,-78,48,32,-40,-21,3,5,36,-106,-8,-42,-1,-104,-25,-37,95,111,-15,13,-61,-70,-66,-74, 
  /* [3][0][][] */ 78,0,37,-11,-76,48,-106,49,50,14,70,-22,117,100,72,-28,91,95,-64,21,127,-87,-68,-108,-41,-114,-84,96,34,-92,86,15,-53,-20,2,-8,-111,-14,51,55,-21,-76,-86,1,67,36,-40,-79,64,-92,61,8,89,43,102,-83,-101,-118,-109,-93,-78,-1,-23,70,71,-32,-63,-17,-52,-56,26,114,34,-117,61,-53,44,85,95,-71,-93,-116,54,100,21,43,-61,-111,-65,52,6,-100,88,-81,-80,52, 
  /* [4][0][][] */ 45,88,1,46,-27,-2,26,16,49,72,-8,40,61,-34,-10,-59,-19,-6,-50,9,93,-76,73,23,-19,-4,52,-48,-43,24,-58,-47,54,97,13,-85,-42,-6,-94,40,-43,-54,-60,-76,27,87,29,46,16,-39,-20,-67,-74,38,-74,18,31,-76,22,10,1,-58,-33,-59,-39,45,2,-31,21,-83,-55,-74,-45,14,87,46,47,-17,-8,-42,3,-43,-82,-20,-1,58,75,-2,-99,-65,42,33,21,127,-86,-13, 
  /* [5][0][][] */ 104,-99,83,89,51,-127,27,60,111,-123,-1,-68,-11,104,38,38,54,63,-91,109,8,50,12,-32,-97,-62,-13,-96,54,25,17,-100,-28,4,-68,13,-124,-34,49,29,-88,-51,38,96,-27,27,38,-48,-100,122,-5,32,24,18,41,-16,103,29,-51,-42,37,-63,44,-70,-27,101,-29,38,82,-2,69,-69,-49,90,-22,-77,4,-58,12,73,108,51,1,111,-83,85,-14,37,50,-101,115,88,-13,-5,72,-76, 
  /* [6][0][][] */ 27,-52,108,82,-75,-61,0,70,-5,-83,9,-80,98,63,116,-112,34,4,-10,107,-74,-118,102,58,-52,-89,-5,-64,-27,-127,49,-71,-78,-112,-40,-110,-19,44,-102,85,88,56,24,-18,-104,109,-82,-41,-77,16,-16,-57,50,-45,97,-21,19,-12,-72,111,-80,-5,72,-71,-47,68,98,-40,84,-3,-116,2,53,-57,-87,-45,-82,-109,-53,-30,36,-18,53,-20,-69,-81,-45,-89,85,99,87,15,-42,-77,88,-19, 
  /* [7][0][][] */ 116,62,-44,-40,-58,107,-22,2,112,7,-93,9,71,-77,43,69,40,16,-15,111,54,28,-13,77,-62,83,38,42,-80,83,-18,38,33,28,62,94,-116,84,-7,-25,90,-73,78,61,50,0,98,-105,55,-68,-92,-60,-33,90,18,30,127,-96,-8,-57,19,-17,81,-107,-53,-53,59,26,-96,20,51,87,74,30,63,47,-62,41,-96,34,86,-28,-7,-67,80,33,-114,88,79,7,70,66,-45,-60,5,-55, 
  /* [8][0][][] */ 5,32,-33,-80,40,33,-65,-24,7,32,41,95,-8,-45,-78,-65,-52,87,-47,2,27,-16,86,106,-114,92,44,84,-58,20,-82,99,80,-35,48,-7,127,-3,-24,62,71,94,-101,-106,-15,-32,-27,98,17,-83,-72,-9,-48,-18,-36,-108,30,115,-80,99,91,50,26,103,-48,-44,-13,88,-92,46,48,-9,79,53,2,32,-47,113,79,80,30,68,-110,-84,25,35,80,-43,33,-37,-70,80,-83,-66,-54,51, 
  /* [9][0][][] */ -2,6,115,45,82,-61,-56,-126,38,56,-15,59,-30,-89,-111,-33,9,-7,-75,-81,2,99,-117,-113,113,-10,-19,26,-13,-66,-99,98,62,-6,27,-20,-78,10,-38,-51,44,-75,52,-100,79,15,-115,52,52,-16,-89,-58,89,-85,-77,104,87,-64,-12,-9,-99,110,83,-84,-48,-1,105,45,-50,101,120,-101,2,78,-105,-103,-88,-127,-46,103,30,22,108,24,-51,-104,34,-24,107,27,-32,111,110,26,53,-42, 
  /* [10][0][][] */ -64,83,98,-66,-18,103,107,35,36,20,24,-74,116,79,-33,5,-35,77,-112,-55,-10,29,56,-67,29,55,-122,-115,-46,93,-98,-86,76,99,127,76,-42,7,-24,36,-36,116,-106,-35,-100,-57,-2,-59,-10,14,46,10,62,20,-49,-25,-103,-25,38,-51,0,91,121,36,120,-77,-98,-21,19,-16,-73,-67,105,62,-78,110,-3,64,66,16,74,-2,65,103,-104,67,96,-27,45,10,9,-76,-60,-37,-42,-63, 
  /* [11][0][][] */ 127,5,-12,86,54,36,47,24,87,56,-50,65,-10,-52,15,-43,-15,-81,48,-1,18,63,23,-76,-113,-62,-20,80,34,-22,29,-9,-46,-43,48,23,-13,46,-15,-32,-30,70,-58,-2,-47,-55,-75,-75,61,53,76,45,-42,-44,-2,1,-3,-41,-47,-8,-62,36,61,13,40,55,-33,32,38,37,-59,-56,21,40,-95,40,-42,35,-26,64,-92,-19,-48,-31,29,-40,9,-30,-73,-12,2,-91,-28,49,-63,-21, 
  /* [12][0][][] */ 21,65,-52,7,99,1,-32,37,-68,61,-12,19,-70,20,52,-72,-102,-27,-54,-72,9,-8,16,96,-59,-51,106,-101,96,1,-32,119,-74,-65,-47,13,-7,-70,-17,49,119,41,-111,-39,-13,-78,-35,122,-35,-109,-97,108,31,7,-81,84,-9,-67,49,71,65,117,1,58,116,37,-43,125,67,101,14,73,77,127,-12,-6,-43,31,-113,-94,-52,114,29,19,-32,38,52,117,-108,-106,85,46,111,-39,32,83, 
  /* [13][0][][] */ 108,-60,106,96,89,122,78,71,67,-112,9,-37,121,69,65,-60,-125,-79,-81,35,84,-33,118,-49,-73,37,-3,18,-93,-87,80,34,32,107,-11,43,-95,-31,32,67,-69,80,-51,12,-51,28,-4,-34,27,102,-20,-108,-101,32,118,-73,-46,20,-9,-88,-23,125,-71,10,-40,-70,-101,87,-47,-7,127,6,-78,29,-70,-47,-97,66,79,-72,45,-107,113,19,-92,-111,86,116,1,-53,-68,51,104,-42,71,-2, 
  /* [14][0][][] */ -41,-105,82,72,77,-38,-24,-125,-82,-45,66,75,-32,-89,-101,-95,-63,-65,5,17,-37,26,-10,56,-123,-80,-43,23,-127,-126,-82,40,109,-26,-42,2,90,118,28,-122,-10,-114,30,85,64,-116,68,-97,118,36,81,50,92,-14,-24,7,-59,10,50,92,-14,-94,-37,71,-103,-17,72,-113,-100,-99,-96,106,3,78,42,-85,50,-119,49,53,40,-26,-123,-35,-127,-100,-110,113,110,7,83,-54,83,106,-20,59, 
  /* [15][0][][] */ 13,-22,-21,72,82,-74,61,-86,56,3,-66,19,126,1,-83,-108,93,10,-72,19,67,22,74,109,72,63,38,97,27,57,63,-98,1,9,-53,3,-55,107,108,-65,16,109,-42,-18,22,-74,-41,-74,-9,-58,12,30,-75,-92,-34,-1,70,49,-36,103,-45,-43,-1,99,-25,93,-64,2,-62,9,94,-66,33,-18,62,-96,7,60,102,73,-78,52,-87,-60,-114,-35,-87,35,99,70,-98,-44,47,127,-102,107, 
  /* [16][0][][] */ -63,-3,103,-54,51,101,-54,45,55,51,-106,72,-18,-41,-49,-58,101,82,61,74,106,79,-44,51,-27,52,-65,58,-102,1,44,17,-95,83,60,58,-44,58,-46,-64,25,-44,72,89,70,107,106,-10,-49,-111,4,115,-51,124,73,52,34,77,66,13,127,104,39,65,63,16,-38,101,51,100,-57,-3,24,103,67,83,-15,91,-108,-20,16,-75,56,16,13,105,96,12,73,16,-23,114,78,-55,-78,34, 
  /* [17][0][][] */ 27,-82,29,73,-50,-99,-54,-63,36,-60,76,44,114,55,-94,34,30,44,85,92,-62,-9,18,-37,11,53,-70,23,83,-53,-23,69,-30,-9,34,24,-38,89,-62,-27,-78,-25,-3,-1,4,17,73,-89,68,82,2,26,6,77,94,-57,-78,70,-67,-99,33,-78,62,84,-68,-58,37,-87,-99,6,127,38,20,-109,-53,63,106,-32,38,-52,8,-17,-52,-69,-93,60,64,-24,31,71,-72,-103,-14,94,13,16, 
  /* [18][0][][] */ -91,104,107,-76,-17,-112,-108,7,-11,77,-109,-66,-39,36,62,-68,19,-25,37,-26,105,-51,21,-82,28,-111,-15,106,18,30,2,49,52,-25,-124,-108,-41,36,-39,68,-41,0,-63,-9,-116,16,26,-6,22,-52,72,34,-121,-5,4,89,-37,28,-46,-127,88,91,17,42,-71,-123,-35,92,58,-96,-78,114,-103,-49,-89,-111,54,57,-2,-77,-58,-14,-29,-66,105,-30,65,70,-113,-78,-80,109,87,-55,47,-39, 
  /* [19][0][][] */ 16,55,67,30,44,-56,89,80,79,-21,30,1,-98,32,-47,63,87,-91,109,53,-19,74,-35,19,72,-70,27,-60,-82,-76,-56,54,73,-69,21,36,54,-58,-52,-97,46,-106,-72,30,-77,32,74,-88,-25,48,-40,51,-10,21,8,-10,33,95,-3,-12,47,-61,98,72,-60,7,-23,-8,-5,48,72,-54,-60,-112,-57,-64,-10,-75,14,112,60,-106,-30,75,-69,1,14,8,80,33,0,66,-28,127,69,-53, 
  /* [20][0][][] */ -1,83,64,86,-80,113,25,59,21,39,-78,26,17,93,45,-52,-33,-24,-35,-33,48,-34,-59,-55,76,-75,-95,50,24,18,-29,122,99,52,-20,65,53,-23,-13,-111,-72,-30,-71,-88,-24,-55,-59,107,57,-124,-69,53,63,126,49,-5,121,111,99,108,119,-47,-65,-35,-23,-53,-41,5,-78,-55,-21,82,-55,-85,32,27,115,95,113,127,95,9,111,-17,70,120,8,86,45,105,25,82,36,40,12,18, 
  /* [21][0][][] */ 85,83,83,-85,81,-54,82,21,5,-56,-58,43,24,39,-40,-84,-87,-22,30,-16,119,-34,83,-64,54,-76,-28,81,16,18,-4,-15,-6,27,-73,-100,127,98,-107,-33,0,22,34,-2,-95,-77,-73,94,-25,-66,6,86,41,72,-77,36,-54,55,-34,122,46,-63,4,-8,72,39,-22,-70,-118,0,85,85,38,-33,73,79,-92,-11,70,110,17,92,45,-67,32,-91,72,-73,-87,77,118,-110,-48,-30,55,-37, 
  /* [22][0][][] */ 39,-42,-59,-52,82,-36,119,57,-63,76,-55,-80,127,-105,-99,-62,52,86,-42,-52,106,-50,44,42,93,31,-93,111,-32,-38,-48,-102,47,59,44,18,24,-8,-50,-83,11,1,8,96,55,-100,94,-12,-45,-46,25,-12,-41,-85,-44,41,-23,7,16,-10,97,-52,-67,-66,-69,27,-83,-10,108,96,26,5,-34,5,56,-67,59,-31,78,105,109,-83,-45,-95,85,83,122,-19,-30,38,-22,52,21,63,-26,81, 
  /* [23][0][][] */ 56,-34,32,56,57,-75,26,-60,54,-20,92,70,6,-77,38,-10,103,-12,-57,56,88,-37,118,2,-9,15,82,45,70,50,80,-19,-29,47,27,59,122,5,-63,12,-66,22,28,-51,-41,-62,99,39,75,-90,-84,-34,90,-49,-43,68,-65,12,90,65,-105,-54,-59,11,19,53,-66,-87,32,-2,103,-52,9,-49,-18,-42,52,22,97,127,-25,-45,20,-72,103,25,124,-4,-61,47,97,-13,82,-6,-43,61, 
  /* [24][0][][] */ -62,-32,-78,-61,-60,-127,-65,-66,46,97,69,14,89,52,-27,-98,-63,37,-1,-35,77,-65,-40,-37,45,-14,53,37,72,32,8,-45,-11,16,17,32,-40,-61,57,-24,-52,-71,87,8,23,-22,42,62,-74,-49,-17,1,42,55,63,-50,-12,49,22,-4,73,-1,35,77,-69,80,-43,-80,-81,47,-56,-14,-25,39,84,82,51,-56,-91,-59,-63,-70,-51,-84,5,52,-6,-75,20,-85,0,-64,-16,14,-82,33, 
  /* [25][0][][] */ -104,-46,-55,7,85,-46,-76,50,59,-104,-25,31,79,1,-96,-7,-46,64,52,-99,73,100,9,-34,20,9,-87,56,87,-56,39,102,79,-116,49,68,125,-62,-16,-11,-74,101,-83,13,89,42,60,43,-101,101,-64,2,57,-41,-56,15,-34,63,-67,85,107,56,37,43,-20,83,5,-9,-89,7,5,-105,47,-118,65,42,86,94,32,32,56,52,-32,77,-59,-45,-67,-73,-9,-29,127,17,-108,36,-17,-72, 
  /* [26][0][][] */ 61,-112,-34,-11,-93,-5,-10,-9,-102,-107,109,85,-51,-37,13,-12,111,35,-86,-69,30,71,97,16,53,46,14,37,7,-4,-89,10,-19,-51,-96,-97,-77,93,-45,110,-95,105,60,32,-69,79,-37,105,-15,16,18,109,7,-34,0,-101,120,63,45,27,22,-105,67,-21,127,-15,-58,61,-81,85,88,108,75,-95,-78,1,52,-114,-95,10,-24,80,104,-68,82,4,-50,21,-68,124,1,29,-44,107,67,96, 
  /* [27][0][][] */ 7,2,-71,-110,-126,-76,-78,-23,39,97,33,-117,-35,53,80,-34,62,-23,64,-91,-104,6,-36,-31,-112,42,-118,-7,63,27,-41,-15,58,66,-99,-97,-97,-74,-123,87,-105,13,25,10,97,19,65,102,87,73,55,-83,-95,-94,-13,-42,101,-31,-117,-85,-67,-60,-40,52,38,-55,-122,105,49,7,-127,3,58,-59,-15,-97,44,-75,86,102,83,-35,114,-65,-83,-92,-41,26,-57,-11,-39,-57,52,17,84,54, 
  /* [28][0][][] */ 80,23,105,58,-123,-34,-41,-56,-12,-70,73,89,-83,-70,26,118,127,121,23,45,0,64,-42,-28,-98,96,-27,18,-25,-75,28,-19,-87,23,97,77,72,-86,-28,42,102,56,-61,65,-81,-7,16,58,37,-56,-77,-26,-11,16,41,37,44,32,90,94,-27,-15,-99,59,30,81,28,87,-64,36,-50,-32,77,18,-4,-39,-91,3,-38,85,-41,-89,102,-19,86,-80,103,-59,-66,-43,16,-67,-42,94,-85,-61, 
  /* [29][0][][] */ 50,53,65,-50,-75,10,-113,12,90,-23,-84,-96,125,-105,-44,-49,-92,98,28,-46,-71,-31,55,6,-30,28,-42,-19,-87,12,100,-6,43,1,-66,-48,-6,101,-1,95,48,109,-39,83,0,103,-48,-21,13,16,51,-92,70,-98,121,58,-110,50,-31,102,-118,109,-77,-47,-50,-61,52,88,95,-78,54,-66,127,77,65,27,123,-56,-30,28,-7,-79,-4,-72,60,112,44,74,-35,90,84,78,-105,39,-13,59, 
  /* [30][0][][] */ 22,-74,-77,27,-119,4,-81,-22,113,-21,-9,-47,-104,14,53,10,-13,32,95,-121,38,-114,-122,3,-122,16,-69,109,-25,-112,-100,1,-92,-78,-127,-62,9,-24,-14,7,85,-84,-18,95,100,-51,99,54,-97,72,17,-115,97,-59,-19,97,-81,-57,-94,-57,-111,-26,-84,-29,-119,-97,-114,78,-86,110,48,-41,-94,101,33,-98,-62,-80,-92,-66,23,23,-113,-27,-116,22,-117,105,-44,-125,62,51,-39,-17,0,-76, 
  /* [31][0][][] */ 67,-85,33,85,41,60,-54,-91,-30,-20,-72,-71,83,-109,-45,95,-55,-82,34,40,51,29,-30,91,36,-103,31,39,-63,-62,38,93,14,14,-81,-9,84,-31,-63,-99,49,-64,-29,25,1,-50,-38,19,59,52,79,-28,-99,-55,-74,17,-101,58,6,97,-37,-6,73,-67,59,95,-42,-69,61,-96,-127,6,-89,-40,-1,6,-52,-44,42,75,-68,-39,32,61,47,82,-86,13,12,-47,-71,-51,8,70,-2,-21, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018906805198639631, 0.0018622250063344836, 0.0017360692145302892, 0.0019059673650190234, 0.0021500135771930218, 0.0018037420231848955, 0.0018484608735889196, 0.0019333334639668465, 0.0019817457068711519, 0.001750046038068831, 0.0018250050488859415, 0.0024819038808345795, 0.0018308347789570689, 0.0017717498121783137, 0.0017682074103504419, 0.0019239495741203427, 0.0018107452197000384, 0.0021873654332011938, 0.0017572786891832948, 0.0019903553184121847, 0.0018609454855322838, 0.0018923339666798711, 0.0020008140709251165, 0.0022813414689153433, 0.0023255145642906427, 0.0019561969675123692, 0.0018168626120314002, 0.0017423632089048624, 0.0021204438526183367, 0.0018846556777134538, 0.0017660919111222029, 0.0020894708577543497, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1850, 3004, 7436, 1972, -2680, -3105, 16199, 2146, 1910, -1223, 7822, -195, -6685, 1691, 8975, 4965, 8439, 5221, -3313, -4453, 3482, 29227, 15450, 16090, 922, 677, 3812, 2559, 1816, -3879, 5198, -2613, -350, 3594, 33, 979, 4780, 3481, -1890, 3835, 7185, 4380, 4927, 10807, 3259, 4053, 1634, 8278, 4662, -3934, -5722, 452, -213, -964, 1381, 19, 171, -714, -4100, 8012, -663, 1136, -995, -1844, -2401, 8219, 21710, 1394, -2139, 771, 1342, 1679, 1243, -1043, 437, 7583, -304, 12385, 12404, -545, 8573, 1706, -500, 1102, 11195, 7072, 3494, 1553, 4159, 2885, -326, -9723, 585, -1694, -1118, -1804, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00033897120738402009, 0.00052565592341125011, 0.00032276881393045187, 0.00043581909267231822, 0.00038534073974005878, 0.00048131606308743358, 0.00020535157818812877, 0.00032967416336759925, 0.00030562933534383774, 0.00053691770881414413, 0.00025528759579174221, 0.00033990718657150865, 0.00037551973946392536, 0.0016457983292639256, 0.00034343867446295917, 0.000232283680816181, 0.00022120641369838268, 0.00027945911278948188, 0.00059276976389810443, 0.00037849473301321268, 0.00018370011821389198, 9.2491922259796411e-05, 0.00019848090596497059, 0.00010429640678921714, 0.00019381006131879985, 0.00072813592851161957, 0.00077841407619416714, 0.00042225368088111281, 0.00029317438020370901, 0.00050900393398478627, 0.00028246277361176908, 0.00029838312184438109, 0.00020302929624449462, 0.00032176714739762247, 0.00033736671321094036, 0.00027089490322396159, 0.00041024497477337718, 0.00030258635524660349, 0.00033091110526584089, 0.00045807447168044746, 0.0001783327606972307, 0.00059609237359836698, 0.00030245861853472888, 0.00021414861839730293, 0.00057348591508343816, 0.0002451022737659514, 0.00031542987562716007, 0.00026326221995986998, 0.00029067756258882582, 0.0003316238580737263, 0.00027128774672746658, 0.0002370185247855261, 0.00072275381535291672, 0.00030871853232383728, 0.00055024237371981144, 0.00057674304116517305, 0.00063164805760607123, 0.00035919350921176374, 0.00038174760993570089, 0.00023532463819719851, 0.0010969371069222689, 0.00056168431183323264, 0.0002751965366769582, 0.00041369351674802601, 0.00077482202323153615, 0.00023404858075082302, 9.9394950666464865e-05, 0.00028389185899868608, 0.00053462845971807837, 0.00040860363515093923, 0.00034630080335773528, 0.00030648813117295504, 0.0011127713369205594, 0.00039027686580084264, 0.00041273896931670606, 0.00028445568750612438, 0.00040596394683234394, 0.00015346430882345885, 0.00014748581452295184, 0.00030682623037137091, 0.0001696422987151891, 0.00019929264090023935, 0.00020410721481312066, 0.00022410803649108857, 0.00016373985272366554, 0.00033703658846206963, 0.00068366172490641475, 0.00018710082804318517, 0.00016484309162478894, 0.00070201937342062593, 0.00029710758826695383, 0.00020172962103970349, 0.00037686413270421326, 0.0005760180065408349, 0.00055721186799928546, 0.00022297394752968103, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,99,-17,-127,-47,-21,-37,-70,-11,19,-14,88,17,-73,-8,62, 
  /* [1][0][][] */ -32,24,-53,0,-25,-20,28,-77,63,48,-52,15,-6,2,33,-127, 
  /* [2][0][][] */ -5,25,-63,23,66,17,-87,-99,127,-58,2,6,-31,94,-72,37, 
  /* [3][0][][] */ 56,-77,4,-107,-1,-25,-12,1,111,4,58,41,-6,34,15,127, 
  /* [4][0][][] */ -81,58,-4,38,26,-10,-18,24,-4,-13,17,-33,-127,-24,-16,25, 
  /* [5][0][][] */ 15,79,122,7,31,67,-105,83,-60,81,-35,-27,49,-53,-127,30, 
  /* [6][0][][] */ 43,-62,127,-127,32,0,-40,103,-74,-83,46,-39,10,81,-36,69, 
  /* [7][0][][] */ 27,127,-27,-62,103,6,-14,-50,116,84,-21,12,15,-26,67,55, 
  /* [8][0][][] */ 17,-79,10,-78,25,-47,5,-63,28,55,65,-2,14,127,75,63, 
  /* [9][0][][] */ 4,-27,-3,127,44,-3,43,-53,-60,90,30,-20,-9,-55,-8,-14, 
  /* [10][0][][] */ 5,5,-41,-127,-6,10,13,42,44,-17,6,-17,0,-34,-7,27, 
  /* [11][0][][] */ 5,10,18,-20,78,-33,89,-60,-85,52,-4,38,3,127,-70,-28, 
  /* [12][0][][] */ 88,-6,-127,-34,27,-72,-13,9,14,61,-88,-60,-41,87,3,42, 
  /* [13][0][][] */ -15,4,-28,13,10,-127,-7,23,7,-1,10,-1,14,-14,3,6, 
  /* [14][0][][] */ 13,-13,73,-32,49,-2,-127,-77,-22,-30,29,16,5,-46,-6,-14, 
  /* [15][0][][] */ -86,2,-11,-46,-26,-13,127,50,-30,54,53,-29,26,74,57,2, 
  /* [16][0][][] */ 9,58,127,91,-2,9,68,69,-91,36,-72,-5,22,6,5,-67, 
  /* [17][0][][] */ -36,-110,-23,33,-71,-18,-66,12,-127,-44,10,-45,-12,44,69,-36, 
  /* [18][0][][] */ 0,37,8,68,40,9,22,-5,79,41,-31,-33,13,127,52,25, 
  /* [19][0][][] */ 9,-6,32,5,102,7,-127,-68,-101,-55,-40,-117,-24,-48,7,-14, 
  /* [20][0][][] */ 87,-53,-61,-32,16,-127,2,18,-40,33,-96,-14,28,1,18,9, 
  /* [21][0][][] */ 56,-27,89,-9,-10,-6,-17,97,-1,-102,80,36,-9,127,51,85, 
  /* [22][0][][] */ -12,45,-55,127,-47,13,70,71,-3,41,-22,38,-5,3,24,7, 
  /* [23][0][][] */ 48,8,127,-95,76,-24,-35,47,0,3,20,-22,5,-11,-114,52, 
  /* [24][0][][] */ -127,35,18,-14,-3,113,35,-10,2,28,97,-7,-74,19,57,-35, 
  /* [25][0][][] */ 31,23,12,26,9,15,71,-53,-2,-127,-20,-18,-11,-34,9,19, 
  /* [26][0][][] */ -44,-4,9,15,-43,0,-33,-33,-99,-36,5,-22,10,127,-40,53, 
  /* [27][0][][] */ 1,23,1,68,30,-28,-14,-25,63,14,-32,4,8,127,-11,19, 
  /* [28][0][][] */ 16,62,61,59,127,-23,38,40,-99,-9,-41,-34,32,99,46,-36, 
  /* [29][0][][] */ -14,16,0,21,43,14,7,37,-23,-40,-14,-127,-19,-24,-11,-4, 
  /* [30][0][][] */ -16,85,-57,70,-32,-16,30,-127,-44,46,-25,-6,39,30,78,87, 
  /* [31][0][][] */ -44,-29,7,-56,-13,7,-35,-93,24,92,-2,-127,-36,-41,-3,9, 
  /* [32][0][][] */ -127,-88,-8,69,49,48,-6,15,5,-43,-113,54,82,9,55,76, 
  /* [33][0][][] */ -4,-38,-50,-4,-96,-7,-88,3,69,30,5,-50,27,-127,114,26, 
  /* [34][0][][] */ 47,-18,67,35,25,30,-37,88,-72,-50,64,39,15,-1,-22,127, 
  /* [35][0][][] */ -44,51,-68,14,-6,-37,28,-127,86,97,-78,-5,15,-8,79,-126, 
  /* [36][0][][] */ -1,2,12,55,14,20,127,17,10,43,-12,-8,-12,20,-48,-22, 
  /* [37][0][][] */ 16,-11,-9,-59,5,-7,-60,-30,-69,9,-12,-16,-1,-127,55,-16, 
  /* [38][0][][] */ 46,96,-23,-49,127,7,29,-38,114,69,-22,-5,1,-30,52,9, 
  /* [39][0][][] */ -27,72,-18,-127,-7,19,-55,34,52,-92,-28,-18,13,79,44,33, 
  /* [40][0][][] */ -17,-18,34,-88,6,-16,-11,-51,-127,-22,5,-17,-1,-95,94,-55, 
  /* [41][0][][] */ -1,-19,-47,-16,-1,-28,22,-4,-26,13,-48,-7,-127,16,23,31, 
  /* [42][0][][] */ 127,95,-32,-25,-76,-62,-32,-59,2,20,97,-56,-70,50,119,-109, 
  /* [43][0][][] */ -27,119,-81,-11,80,-20,91,-53,38,64,-31,-8,3,-127,-56,-36, 
  /* [44][0][][] */ -33,-27,19,-30,62,5,-80,-127,-17,-22,19,17,-8,-16,89,-67, 
  /* [45][0][][] */ -12,56,-127,-37,34,-67,1,-61,3,17,0,-75,6,-29,53,2, 
  /* [46][0][][] */ 4,1,-15,-89,-9,8,18,-37,-120,-29,12,14,-11,-127,72,-30, 
  /* [47][0][][] */ 17,45,33,-16,127,-15,-19,14,-54,43,6,28,6,8,120,-31, 
  /* [48][0][][] */ -127,-88,-28,44,61,29,21,-16,8,-12,-125,52,69,15,81,53, 
  /* [49][0][][] */ 8,18,83,76,127,8,53,18,-103,-53,-47,-107,-15,104,22,-74, 
  /* [50][0][][] */ 53,-8,-127,-19,36,-126,-85,-5,-3,-13,-26,-59,24,-45,0,30, 
  /* [51][0][][] */ 0,37,48,7,34,-9,-13,19,-127,60,14,-107,11,-113,-17,91, 
  /* [52][0][][] */ -1,53,-3,50,51,-2,26,36,79,77,-25,-55,27,127,70,25, 
  /* [53][0][][] */ -8,-47,-16,-16,-86,-18,-90,-1,44,30,13,-64,28,-127,106,26, 
  /* [54][0][][] */ 62,-7,-58,9,114,77,-127,-25,-64,-18,-33,-58,-5,-29,2,-24, 
  /* [55][0][][] */ 31,6,11,3,46,-29,-61,-127,-39,-81,-41,7,-17,-27,28,-12, 
  /* [56][0][][] */ -24,18,32,-26,-2,-32,-98,63,-16,127,3,-17,25,0,-1,3, 
  /* [57][0][][] */ 6,22,-47,-13,-52,-50,127,93,-24,40,-21,-6,24,17,111,-10, 
  /* [58][0][][] */ 51,16,-127,50,90,113,-24,69,-110,-37,7,28,-17,51,-9,-18, 
  /* [59][0][][] */ -98,62,111,21,-84,-66,127,126,27,16,33,-15,12,13,70,9, 
  /* [60][0][][] */ 1,-1,-38,-3,18,-127,-22,-6,-13,-11,4,-22,22,-16,6,3, 
  /* [61][0][][] */ 13,1,27,127,90,16,17,-1,-108,-12,24,35,-17,16,37,-62, 
  /* [62][0][][] */ -53,127,16,-49,-17,-19,-80,52,-24,-53,-76,-59,-3,-91,-49,-26, 
  /* [63][0][][] */ -38,31,-28,127,-74,18,-66,-31,-56,-20,-24,-41,24,65,36,32, 
  /* [64][0][][] */ 3,7,8,39,11,7,-20,56,23,-1,-12,-42,-20,-127,56,-3, 
  /* [65][0][][] */ -28,-34,21,-127,52,-43,56,-43,-16,41,22,-109,-17,5,25,-39, 
  /* [66][0][][] */ 20,-7,76,-28,13,-6,-22,104,-1,-85,52,34,2,127,27,95, 
  /* [67][0][][] */ -6,57,-8,-127,-3,-3,-68,29,72,-101,-17,-8,31,82,63,44, 
  /* [68][0][][] */ -41,54,127,10,24,-6,-24,-9,-45,-31,-15,-44,12,-25,88,-29, 
  /* [69][0][][] */ 127,88,-4,-3,-92,-40,-38,-38,8,19,109,-55,-69,68,77,-89, 
  /* [70][0][][] */ 57,16,-67,-17,-22,19,43,127,-44,112,-49,-23,1,58,-32,29, 
  /* [71][0][][] */ 5,-11,-5,9,-2,-90,-4,22,-30,25,-81,2,-127,-6,43,61, 
  /* [72][0][][] */ 3,23,-127,15,16,17,18,74,-33,-31,8,-12,5,6,6,2, 
  /* [73][0][][] */ -58,34,39,12,55,-35,-95,-127,18,-81,41,-15,6,-41,46,-9, 
  /* [74][0][][] */ -3,37,34,127,21,4,-76,81,-68,-7,-47,43,8,-109,37,-96, 
  /* [75][0][][] */ -17,40,-69,7,26,-25,1,-26,127,22,-6,-11,8,120,-25,12, 
  /* [76][0][][] */ 5,-14,-12,16,-4,-17,-8,62,15,-20,-22,-127,-15,-8,12,5, 
  /* [77][0][][] */ 1,17,-22,127,-42,28,87,101,19,24,-3,38,-19,-4,-17,-9, 
  /* [78][0][][] */ 16,-8,28,-109,38,-20,-15,50,34,-39,-3,-35,31,127,7,36, 
  /* [79][0][][] */ -21,-89,-70,-53,-85,-7,34,-87,127,27,18,51,20,27,33,-62, 
  /* [80][0][][] */ -64,18,116,-96,54,-27,22,-102,-81,14,-20,-127,18,109,80,-66, 
  /* [81][0][][] */ -48,35,-109,20,57,-127,-13,49,-9,-34,67,1,29,3,15,2, 
  /* [82][0][][] */ 127,-11,-16,11,17,-123,-31,14,-18,-12,-105,-1,118,1,1,31, 
  /* [83][0][][] */ -47,83,-106,-82,-20,-12,33,-127,58,31,-30,-121,6,51,52,91, 
  /* [84][0][][] */ -45,18,91,-33,-18,-35,81,-127,-30,52,-16,-45,39,57,63,1, 
  /* [85][0][][] */ -87,127,21,-117,-65,-37,-40,-8,-49,-6,-60,17,0,-13,-83,-23, 
  /* [86][0][][] */ -7,12,-34,6,-22,-22,127,21,11,-34,1,16,-2,21,78,-25, 
  /* [87][0][][] */ -33,-27,3,-112,19,-33,40,-22,-14,8,-2,-127,-25,-1,15,-42, 
  /* [88][0][][] */ 90,-7,15,-18,41,-127,-35,30,-59,47,-116,-59,30,20,77,23, 
  /* [89][0][][] */ 29,-26,-39,-45,18,-16,-20,1,-48,17,23,-63,127,-7,15,-43, 
  /* [90][0][][] */ -9,-50,37,-71,76,-8,-77,91,62,-99,-31,-27,-14,127,28,-123, 
  /* [91][0][][] */ -72,6,-26,-44,35,-9,-63,-124,14,70,-7,-127,-68,-32,16,22, 
  /* [92][0][][] */ -27,22,44,14,0,-127,3,1,2,-15,4,-9,4,-25,22,12, 
  /* [93][0][][] */ 42,-11,127,-30,-61,58,28,-47,-27,24,-73,-27,-30,-17,38,-6, 
  /* [94][0][][] */ 22,6,-6,-23,28,-13,-23,-7,-33,-16,19,-38,127,-14,22,-31, 
  /* [95][0][][] */ 127,77,5,31,-94,-15,-53,3,-32,-1,82,-42,-33,30,70,-65, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00079629186075180769, 0.0012348409509286284, 0.00075823016231879592, 0.0010238013928756118, 0.00090522051323205233, 0.0011306803207844496, 0.00048240023897960782, 0.00077445176430046558, 0.00071796705015003681, 0.001261296565644443, 0.00059970712754875422, 0.00079849065514281392, 0.00088214961579069495, 0.0038662159349769354, 0.00080678658559918404, 0.00054566760081797838, 0.0005196455167606473, 0.00065648945746943355, 0.001392501057125628, 0.00088913831859827042, 0.00043153786100447178, 0.00021727675630245358, 0.0004662600695155561, 0.00024500719155184925, 0.00045528757618740201, 0.0017104955622926354, 0.0018286060076206923, 0.00099193432833999395, 0.00068870856193825603, 0.0011957230744883418, 0.00066354550654068589, 0.00070094468537718058, 0.00047694487147964537, 0.00075587705941870809, 0.00079252268187701702, 0.00063637091079726815, 0.00096372416010126472, 0.00071081868372857571, 0.00077735754894092679, 0.0010760824661701918, 0.00041892917943187058, 0.0014003063552081585, 0.00071051856502890587, 0.00050306576304137707, 0.0013472004793584347, 0.00057578034466132522, 0.00074098992627114058, 0.00061844062292948365, 0.00068284320877864957, 0.00077903189230710268, 0.00063729373505339026, 0.00055679044453427196, 0.0016978521598502994, 0.00072522403206676245, 0.0012925980845466256, 0.00135485187638551, 0.0014838316710665822, 0.00084379693726077676, 0.0008967797621153295, 0.0005528112524189055, 0.0025768622290343046, 0.0013194768689572811, 0.00064647605177015066, 0.00097182526951655746, 0.0018201677594333887, 0.00054981361608952284, 0.00023349295952357352, 0.00066690263338387012, 0.0012559187598526478, 0.00095986842643469572, 0.00081351015251129866, 0.00071998446946963668, 0.0026140592526644468, 0.00091681623598560691, 0.00096958293579518795, 0.00066822709050029516, 0.0009536673896946013, 0.00036050961352884769, 0.00034646526910364628, 0.00072077871300280094, 0.00039851403562352061, 0.00046816692338325083, 0.00047947705024853349, 0.00052646186668425798, 0.00038464835961349308, 0.00079174718121066689, 0.0016060192137956619, 0.00043952662963420153, 0.00038724002661183476, 0.0016491439891979098, 0.00069794821320101619, 0.00047389173414558172, 0.00088530778884887695, 0.0013531487202271819, 0.0013089703861624002, 0.00052379770204424858, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -7454, 28110, -31283, -9187, -4394, 6690, 21774, -64445, -5349, 8569, 20066, 7751, -15458, 6741, 1126, 10560, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00076698331395164132, 0.00042836836655624211, 0.00019393532420508564, 0.00019214389612898231, 0.00044756330316886306, 0.00039169198134914041, 0.00045523489825427532, 0.00026614248054102063, 0.00030946364859119058, 0.00028004893101751804, 0.00080954475561156869, 0.00061214820016175508, 0.00042814263724721968, 0.00024473926168866456, 0.00052645680261775851, 0.00042051047785207629, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -18,-18,11,-31,14,-2,-38,4,18,2,-15,9,-9,-11,-25,-8,-4,3,1,-4,20,-37,6,8,4,8,8,127,33,-41,37,-8,-4,6,3,-9,-22,11,-40,0,-10,10,-4,35,5,17,16,11,20,5,-5,5,14,-21,-16,84,5,11,-35,-34,-6,26,-8,-23,-47,-68,-31,42,5,21,19,-12,-6,-30,0,-28,-25,15,8,1,-6,-33,37,24,-5,-14,-9,-100,2,-21,4,-8,47,-33,-37,-7, 
  /* [1][0][][] */ 26,-80,-81,-54,127,-17,72,25,-12,-118,-55,-33,-13,-28,-55,43,-61,9,46,47,41,33,-15,-60,3,6,-31,-79,23,-24,-78,51,-41,15,0,-3,11,3,-31,34,-10,37,-64,-21,-61,76,23,20,20,-86,13,-69,-42,16,48,29,-61,-20,-46,-39,4,-26,8,-40,-108,118,-18,-24,-21,-40,-29,21,51,-113,-36,-4,46,-49,44,4,-2,-15,22,6,-51,16,-22,21,16,-63,-19,5,29,-15,40,121, 
  /* [2][0][][] */ -5,70,-111,13,127,109,60,52,17,-117,1,-31,-15,-11,50,25,5,-15,-41,91,-11,-4,113,32,54,70,-18,-53,29,-8,55,-92,33,14,-23,79,-122,-83,7,39,8,-53,20,-14,1,-42,-19,79,-34,24,-46,-44,61,-21,-12,100,69,8,33,0,0,28,44,-24,17,-29,-18,-19,-52,-24,-23,-46,-82,-74,-4,79,99,72,18,-19,26,-20,9,2,-19,38,11,51,-30,23,-15,-32,2,-51,-75,16, 
  /* [3][0][][] */ 63,25,95,-16,42,-58,7,5,-29,-66,20,-30,13,44,45,123,30,-10,32,22,127,-4,35,9,56,-33,-1,23,47,45,0,102,-115,46,34,-1,-13,-27,27,29,-96,-25,81,19,40,62,-59,-113,-61,-36,-40,81,20,-113,6,7,-105,87,72,37,36,115,-25,-68,55,73,-10,-54,38,-29,25,-81,90,-50,47,-22,-4,11,74,46,-36,-99,2,-28,-35,22,19,52,36,28,35,52,35,120,59,-63, 
  /* [4][0][][] */ 14,-8,19,-10,127,33,-9,-26,-30,-53,-22,-35,-54,4,-3,51,27,-69,-47,83,0,1,28,-20,-2,1,-2,-37,-8,-2,45,-21,62,-16,-25,14,37,25,-10,12,-11,-10,-25,-20,-15,-64,2,11,39,8,-13,-12,-25,-53,0,-15,18,-13,-43,22,-20,35,69,26,30,56,-18,-12,-48,-11,30,60,20,-62,-37,-21,36,34,62,-27,-2,-16,-8,-5,-60,2,38,54,-51,21,3,-45,9,3,23,-19, 
  /* [5][0][][] */ 8,-9,-12,5,17,-21,32,-15,-32,-22,-16,14,10,32,-7,24,-7,-4,13,-1,15,20,-44,57,21,-20,27,-99,8,24,20,25,-11,21,10,-54,37,16,14,-4,-24,-6,27,-12,-2,11,-3,-31,-16,-7,15,5,6,-18,-3,-59,-11,15,-12,14,77,22,2,27,7,50,-3,89,16,93,24,28,22,7,-8,65,-40,-17,23,8,-8,-23,0,9,-9,35,-12,127,7,35,10,-10,6,30,-59,7, 
  /* [6][0][][] */ 26,-69,15,-41,-39,12,35,38,1,1,-26,-52,-14,13,-32,28,18,0,-6,-7,-58,39,9,5,-12,-17,-5,-14,3,4,49,-17,57,35,52,-3,3,-13,49,-97,-36,87,3,-18,16,-4,-27,7,-16,41,-19,96,6,-31,-11,-18,-3,-54,7,1,4,65,27,-80,48,-37,4,-1,7,1,127,-4,-24,-1,-26,14,-88,-11,29,-2,25,21,21,-10,-19,17,34,12,21,19,54,-31,-14,5,-27,-26, 
  /* [7][0][][] */ 4,127,62,16,118,78,55,-13,-25,-30,40,5,-21,48,16,22,20,-37,12,20,32,-26,30,37,2,0,21,15,36,-16,18,13,72,11,-37,11,27,9,14,78,-45,37,33,21,-2,-10,31,-22,-23,-14,32,30,38,-22,-38,41,58,10,-8,8,2,-34,-17,5,-49,61,-48,-91,-3,-4,-1,62,-22,-21,28,6,44,59,47,-7,-39,-47,16,-7,-15,65,0,0,-17,44,-30,-35,-43,2,24,0, 
  /* [8][0][][] */ 9,-2,59,9,-127,-27,34,1,24,80,57,20,-6,26,19,2,-45,10,5,1,-27,2,-106,66,19,-48,69,-9,12,6,10,47,83,-11,-2,-11,-35,-20,17,28,14,-30,45,7,-21,7,49,7,-95,16,34,46,-39,-16,-37,32,13,-42,-79,-18,28,-23,-39,-10,19,73,-15,-36,29,5,-36,-19,52,47,56,-6,-33,-45,3,29,-75,-9,-12,-14,8,33,58,43,31,-30,59,42,1,7,37,2, 
  /* [9][0][][] */ 27,-105,-22,30,95,98,-21,-51,41,-41,74,71,-21,21,92,-89,6,-33,-1,7,-50,-42,42,8,-1,18,2,18,-26,7,-1,-34,40,-12,-93,35,-3,7,-21,60,39,-54,-8,38,1,-5,-71,-14,11,15,-26,-83,43,47,-35,-50,30,89,-12,10,-4,-29,-52,127,-96,-10,1,-18,6,48,-48,-66,30,17,10,21,57,-62,19,5,1,-20,23,37,-12,-56,19,-16,3,-25,-72,30,-54,-2,1,-24, 
  /* [10][0][][] */ -56,-17,-40,-37,-22,5,76,-40,30,25,28,43,23,-6,-5,-3,-14,19,-22,-12,-21,33,23,22,-1,10,7,-127,39,-46,56,-44,5,17,-3,1,14,31,0,-11,2,-34,24,-42,17,-3,18,7,-2,38,-34,-23,-40,-30,6,-40,29,7,7,-37,27,10,5,8,-34,74,-6,-44,18,-40,1,-26,-41,-7,20,62,3,42,-30,11,-17,9,10,30,24,-16,-3,118,-3,5,6,16,27,-39,35,-27, 
  /* [11][0][][] */ -85,25,2,-4,12,-62,-17,11,-59,12,-4,28,40,35,-32,-1,46,1,-64,-46,3,1,-11,2,85,-4,72,2,-7,26,-29,5,1,41,0,-6,2,1,48,-2,-31,-3,15,15,95,25,66,5,53,46,-6,60,27,-48,28,-10,-74,-15,-25,-43,10,1,-2,13,12,-33,24,6,29,12,5,25,-19,9,24,3,-29,77,-115,64,-37,-24,-65,-77,127,35,43,-8,25,63,-14,-55,-15,60,-27,-15, 
  /* [12][0][][] */ -9,-8,-33,0,80,41,6,-13,-19,24,28,1,10,8,29,-15,-41,-4,8,-17,-28,-11,-30,49,2,50,-18,104,-21,35,-42,5,-2,26,3,28,-20,-22,4,17,-9,-26,0,10,-24,0,8,12,1,-13,-1,-27,-37,10,-12,-6,-3,-19,17,25,-14,-26,-7,54,47,-91,16,66,-18,-127,-14,59,-14,3,21,80,16,-13,-18,3,-14,28,-32,13,20,-7,5,-42,-2,22,-7,8,-31,36,-18,36, 
  /* [13][0][][] */ -81,67,12,-16,-77,20,-12,33,-58,-11,42,45,95,38,-34,2,-19,29,-45,-5,-1,1,59,-49,79,19,9,2,32,-34,-27,-105,-69,-6,5,6,-4,24,51,-32,-41,85,16,31,57,27,0,-7,70,-3,46,117,83,-44,68,-23,-34,54,48,4,37,40,-36,27,25,-37,-6,22,37,27,30,-127,22,-30,-75,-3,34,37,-41,-25,81,-41,16,-40,43,-29,96,9,-6,12,4,29,40,-24,-24,7, 
  /* [14][0][][] */ -29,20,-24,-50,33,-12,-14,17,-88,-3,17,7,-31,-75,-86,-19,-80,-9,67,9,45,-3,21,-125,-41,19,-59,-22,4,-19,-15,-19,-78,-45,9,-2,-22,5,-4,5,10,77,-80,-8,-63,9,11,6,127,-33,17,-24,16,39,-101,22,-23,12,-104,-1,-4,11,52,28,1,33,4,-3,-63,11,45,36,34,-16,-23,29,55,-70,-28,-95,10,-15,2,45,24,-79,-47,5,-44,10,19,65,13,24,28,-11, 
  /* [15][0][][] */ -30,-79,1,-48,1,6,-14,-56,-34,13,-1,-24,47,-3,42,-29,-92,-11,-23,4,-15,13,-76,-47,1,-13,-1,24,-15,-11,70,-86,4,39,25,1,-18,13,-96,0,28,-77,7,16,-10,-44,64,32,59,17,0,-127,11,65,-1,27,34,-11,-15,44,15,-1,31,-6,7,-12,-24,-2,-22,42,8,35,-42,2,8,-32,-43,-11,8,15,0,38,-8,69,-18,-38,-38,-28,-43,68,34,91,-48,5,-6,-24, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032596789300441742, 0.018205655738711357, 0.0082422513514757156, 0.0081661157310009003, 0.019021440297365189, 0.016646908596158028, 0.019347483292222023, 0.011311055161058903, 0.01315220445394516, 0.011902079917490482, 0.034405652433633804, 0.026016298681497574, 0.018196061253547668, 0.010401418432593346, 0.022374413907527924, 0.017871694639325142, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 21203, 59630, -50, 159, 13461, -7664, 109, 193, 6374, 9766, -5915, -667, 745, 3383, 5079, -8715, -3905, -828, -345, 12839, -10787, 14691, -2166, 9050, 14992, -601, -6040, 17365, 12751, -18361, 1507, 22255, 24592, -10496, 1609, 605, -30, -966, 2917, -7802, -5788, -392, -6604, -606, 30018, -2110, 12260, -2140, -15009, 91, -66, -667, -2382, 21657, -3998, 15842, 15675, -219, 35169, 356, -9987, -898, 1496, 217, -2282, 11443, -1826, -6738, -3568, 3059, 51, -3160, 1776, 362, -1984, -7155, -697, -1046, 32715, -8307, -6445, -12434, -675, -106, 59286, -12997, -9699, -27074, -7928, 8332, -1924, 32686, -881, -1907, -2353, 1023, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00010782924073282629, 9.4168019131757319e-05, 0.00012040576984873042, 0.00020546630548778921, 0.00027581621543504298, 0.00010075377940665931, 4.8069490730995312e-05, 8.3605496911332011e-05, 0.0002648277732077986, 0.00024858885444700718, 0.00021904052118770778, 0.0001018335169646889, 0.00025407649809494615, 0.00020322836644481868, 0.00039160891901701689, 0.00017355514864902943, 0.00022352149244397879, 0.00018661651120055467, 0.00017650367226451635, 8.88517388375476e-05, 8.6319632828235626e-05, 4.0090879338094965e-05, 0.00013907114043831825, 8.7554966739844531e-05, 7.0451751525979489e-05, 0.00010456437303218991, 0.00016675374354235828, 0.00016862712800502777, 7.143188122427091e-05, 0.00048701980267651379, 0.0003564890066627413, 0.00025216193171218038, 0.00012832762149628252, 0.00014573821681551635, 0.00022452315897680819, 0.00048915785737335682, 0.00039176319842226803, 0.00019065094238612801, 0.00026586282183416188, 9.603035869076848e-05, 0.00020194234093651175, 0.00022729515330865979, 0.00039360349182970822, 6.5204549173358828e-05, 0.00037663578405044973, 8.8919194240588695e-05, 9.9910183052998036e-05, 0.00031460769241675735, 0.00063370534917339683, 0.00010841869516298175, 0.0004259589477442205, 0.00014980608830228448, 0.0002011199394473806, 0.00012525136116892099, 0.00021066179033368826, 0.00011360644566593692, 0.00017356655735056847, 0.00041520583909004927, 4.8251964472001418e-05, 0.00016856990987434983, 0.0002850366581697017, 0.00024464188027195632, 0.00011711208207998425, 0.00014980620471760631, 0.00013634415518026799, 0.00014011422172188759, 0.00028085606754757464, 0.00031445236527360976, 0.00020815925381612033, 0.00013878688332624733, 0.00018944716430269182, 9.837364632403478e-05, 0.00026911441818810999, 0.00013952178414911032, 0.00042915550875477493, 0.00025971236755140126, 0.00012510560918599367, 8.1110600149258971e-05, 7.8001583460718393e-05, 0.00015697878552600741, 0.00020020724332425743, 0.00023067346774041653, 0.00015605409862473607, 0.00028615284827537835, 6.0067228332627565e-05, 0.00011140810966026038, 7.0802801928948611e-05, 0.00047984940465539694, 0.00024123128969222307, 0.00012188038090243936, 0.00038119292003102601, 3.4196677006548271e-05, 0.0001573383342474699, 0.00010171343456022441, 0.00039249673136509955, 0.00028292834758758545, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -45,-71,-11,127,22,71,77,-59,-14,-18,-15,-4,-30,0,37,3,-11,-42,27,22,19,-127,127,5,-83,10,50,-28,-126,-127,39,25,11,27,62,-19,-30,-10,29,-10,-13,27,-110,71,25,-66,37,48,-18,53,-23,22,3,-7,18,50,-90,-48,-62,-20,-8,-1,13,39,69,-24,76,15,-7,18,20,127,23,22,25,-2,-9,17,127,-6,-14,15,-27,22,121,22,-79,-17,0,-32,-15,-40,2,-26,-16,25, 127,-126,72,106,-43,127,43,-120,68,5,-18,127,127,-97,-13,14,12,127,127,-111,127,-79,81,69,-127,-108,-66,-33,-54,45,-60,-20,-85,55,-127,-86,-44,-14,-51,58,-2,127,127,82,-51,-111,-112,-49,-15,-127,44,87,71,-31,47,85,-46,43,-83,-115,-41,-42,-62,67,73,-60,27,31,-78,36,-17,89,115,127,13,18,3,59,-32,51,65,127,127,-22,-8,76,-114,127,-121,-98,4,-127,-88,-127,-37,106, -72,-11,27,-83,14,-20,64,-8,78,-33,-28,19,-19,-5,-9,-12,-10,-15,7,-4,-21,-98,30,-2,-120,95,8,-54,119,48,-15,9,1,12,15,-28,-10,33,21,6,25,12,-116,61,18,-17,36,14,-15,12,-16,8,-7,1,-2,21,-66,6,-33,50,4,43,32,-1,-6,-37,-31,25,8,4,-3,35,10,-26,-6,5,-10,-7,-82,2,-21,-22,-17,3,-106,12,-33,-23,-50,26,-26,-35,30,-25,-14,0, 
  /* [0][1][][] */ -63,-73,72,-36,-48,86,20,127,-52,-20,0,-117,25,-114,78,30,-4,-60,-17,90,58,-69,47,50,-100,-7,127,-21,-24,62,124,-105,-127,92,-86,-58,-38,33,-26,103,-50,-27,-7,46,-47,127,-23,67,15,97,20,-1,13,-54,29,32,127,123,-75,-87,127,-33,-34,127,72,-37,-14,0,127,42,127,96,-40,102,-5,11,16,13,-30,10,-43,123,-78,111,0,34,-57,29,78,-127,-32,-7,127,-68,-23,1, 67,127,55,-114,127,76,86,36,-127,127,127,-39,-65,-127,-127,127,127,-62,-125,-48,108,91,-123,127,-114,-84,-43,127,-127,107,-127,-127,-87,127,108,127,127,-127,-103,127,-66,-97,111,-127,-127,-34,-127,-127,127,-111,85,45,127,127,127,-127,100,-127,-127,127,21,-79,-127,-99,-127,127,-127,127,-119,-127,-104,-83,-127,-80,127,127,-127,127,-76,127,127,31,-41,-127,58,127,95,45,127,15,127,-3,-67,35,127,-127, -52,-12,-51,38,-57,-91,34,-29,17,-33,-28,93,1,99,14,12,-4,63,-6,127,7,-85,-41,7,-79,104,-70,-19,-68,-17,16,-64,-68,34,5,-17,-31,46,-65,49,127,-5,-38,27,-39,-57,15,46,8,120,-11,8,-40,-71,4,20,94,2,1,21,-32,127,93,-51,-43,14,38,-9,-73,125,-18,-86,-1,-55,-16,-17,29,17,78,-36,-70,-40,56,16,-45,-14,71,22,15,65,-42,18,-42,98,-26,-5, 
  /* [0][2][][] */ -66,2,-5,-22,12,-43,66,24,54,-26,-36,-1,17,20,-26,-1,-8,65,7,3,-52,-80,2,-5,-28,-47,34,-67,91,37,27,26,17,-12,-12,-46,-8,36,-1,-4,-16,-8,-69,102,3,33,12,38,-15,-29,11,-20,27,-2,11,15,-69,24,-18,13,15,-1,-18,-5,-1,-45,-46,18,-29,16,28,30,13,-20,28,4,19,5,-78,-12,-8,-7,18,14,-127,6,12,-44,-57,-51,-28,-47,9,57,-19,-8, 120,34,-127,-36,-73,-25,38,28,-66,-28,-19,-107,-78,118,-13,32,1,-49,-9,-124,95,-49,-38,4,-115,127,-50,21,-35,-22,-9,-5,-59,20,29,6,-23,-27,127,56,11,-14,70,-35,-38,77,-67,-43,-33,-5,-127,-127,-54,-25,4,40,-65,-7,11,38,-4,-19,10,-47,-54,34,65,-20,113,112,-22,-71,10,-58,4,1,102,5,50,22,12,-96,-48,4,2,10,127,40,-59,42,-19,-110,41,80,-9,27, -53,13,-20,25,15,-62,-127,1,-12,-7,-16,4,14,-23,19,-2,-9,-14,5,18,-48,-70,15,1,12,-89,20,5,-48,-39,-8,15,43,-23,-5,-24,-38,4,43,-40,23,-3,-47,-37,3,66,22,18,-9,-3,8,-8,17,4,-1,-5,-62,-12,3,-39,-8,9,86,-8,35,0,-2,31,1,7,-3,22,-19,15,1,16,38,2,76,-11,3,-9,-7,-15,71,0,44,-39,61,43,-17,-52,-7,3,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0045827426947653294, 0.0040021408349275589, 0.0051172450184822083, 0.0087323179468512535, 0.01172218844294548, 0.0042820353992283344, 0.0020429533906280994, 0.0035532335750758648, 0.011255179531872272, 0.010565025731921196, 0.0093092219904065132, 0.0043279244564473629, 0.010798251256346703, 0.0086372056975960732, 0.016643378883600235, 0.0073760938830673695, 0.0094996634870767593, 0.0079312017187476158, 0.0075014056637883186, 0.0037761987186968327, 0.0036685843952000141, 0.0017038623336702585, 0.0059105232357978821, 0.0037210860755294561, 0.0029941995162516832, 0.0044439858756959438, 0.007087034173309803, 0.0071666529402136803, 0.0030358547810465097, 0.020698340609669685, 0.015150782652199268, 0.010716881603002548, 0.0054539237171411514, 0.0061938739381730556, 0.0095422342419624329, 0.020789209753274918, 0.016649935394525528, 0.0081026647239923477, 0.01129916962236166, 0.00408129021525383, 0.0085825491696596146, 0.009660043753683567, 0.016728147864341736, 0.0027711933944374323, 0.016007021069526672, 0.0037790657952427864, 0.0042461827397346497, 0.013370826840400696, 0.026932477951049805, 0.0046077943406999111, 0.018103254958987236, 0.0063667586073279381, 0.0085475975647568703, 0.0053231827914714813, 0.0089531261473894119, 0.0048282737843692303, 0.0073765786364674568, 0.017646247521042824, 0.0020507085137069225, 0.0071642212569713593, 0.012114058248698711, 0.010397279635071754, 0.0049772635102272034, 0.0063667637296020985, 0.0057946266606450081, 0.0059548541903495789, 0.01193638239055872, 0.013364224694669247, 0.0088467681780457497, 0.0058984421193599701, 0.0080515043810009956, 0.0041808797977864742, 0.011437362991273403, 0.0059296754188835621, 0.018239108845591545, 0.011037775315344334, 0.0053169880993664265, 0.0034472004044800997, 0.0033150671515613794, 0.0066715981811285019, 0.0085088079795241356, 0.0098036220297217369, 0.0066322991624474525, 0.012161496095359325, 0.002552857156842947, 0.0047348444350063801, 0.0030091190710663795, 0.020393598824739456, 0.010252329520881176, 0.0051799160428345203, 0.016200698912143707, 0.0014533586800098419, 0.0066868788562715054, 0.0043228208087384701, 0.016681110486388206, 0.012024454772472382, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1766, 10460, 10274, 23580, 24964, -3717, -1643, 4830, 27786, -4414, 9244, 5271, 7770, 11110, 31394, 1178, 2336, 8874, 12656, 7008, -234, 561, 14940, -983, 6705, -311, 11733, 6526, 6391, 37455, 53034, 15410, 10496, -820, 10081, 2761, 1527, 3548, 22544, -860, 11069, 10586, 40411, -4956, 24700, 8551, 6483, 14107, 64400, 8967, -451, 7306, -3284, -234, -2286, 10004, -528, 14953, 5730, 10609, 7082, 14230, 5264, 6724, 7958, 10393, 5747, -5531, 6707, -3369, 5182, 12120, 18741, 5617, -5316, -3168, 5924, 210, 2691, -1347, 13643, 14388, 5486, 16839, 2986, 224, 10867, 83161, 8842, 12186, 6894, -120, 6017, 6569, 6043, 11910, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00021738055511377752, 0.00014296051813289523, 0.00018269388237968087, 9.8856275144498795e-05, 0.0001207391542266123, 0.00027918847627006471, 0.00051399489166215062, 0.00033323914976790547, 8.4276478446554393e-05, 0.00030764273833483458, 0.00028962554642930627, 0.00017045694403350353, 0.00016111314471345395, 0.00021149081294424832, 7.6050731877330691e-05, 0.00046464556362479925, 0.00021223060321062803, 0.00013782504538539797, 0.00017701895558275282, 0.00017457906506024301, 0.00033838459057733417, 0.00042741018114611506, 0.00013315609248820692, 0.00070453656371682882, 0.00038300117012113333, 0.00020113248319830745, 0.00018793041817843914, 0.00021289128926582634, 0.00025205026031471789, 9.4603441539220512e-05, 5.3543448302662e-05, 0.00016141014930326492, 0.00016562890959903598, 0.00029890990117564797, 0.00019712414359673858, 0.00021013722289353609, 0.00034468548255972564, 0.00040866070776246488, 0.00011948147584917024, 0.00067098368890583515, 0.00017135018424596637, 0.00015207733667921275, 6.669951108051464e-05, 0.00022367532073985785, 0.00013180369569454342, 0.00017759762704372406, 0.00026589087792672217, 0.0001899898488773033, 6.4176529122050852e-05, 0.00023055753263179213, 0.00019682271522469819, 0.00021877678227610886, 0.00032439964707009494, 0.00020449938892852515, 0.00044643876026384532, 0.00011246489884797484, 0.00020987147581763566, 0.00012554384011309594, 0.00035855890018865466, 0.00014084475697018206, 0.00021680079225916415, 9.9279277492314577e-05, 0.00027327841962687671, 0.00015591789269819856, 0.00030415519722737372, 0.00018509467190597206, 0.00022335942776408046, 0.0002410628367215395, 0.00025148532586172223, 0.00021020605345256627, 0.0002113267983077094, 0.00013422062329482287, 0.00011081530101364478, 0.00018722872482612729, 0.0002869876625481993, 0.00041308431536890566, 0.00027480328571982682, 0.00037242830148898065, 0.00028454084531404078, 0.0002784391981549561, 0.00014954817015677691, 0.00011771857680287212, 0.00015571668336633593, 0.00011344825179548934, 0.00038732873508706689, 0.00027641138876788318, 0.00021677596669178456, 4.6551809646189213e-05, 0.00015407113824039698, 0.00018602221098262817, 0.0001846182276494801, 0.000370157475117594, 0.00024035580281633884, 0.00023582651920150965, 0.00018214937881566584, 0.000142314747790806, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -9,74,-5,87,40,53,35,15,43,28,-84,122,-2,-123,25,-127, 
  /* [1][0][][] */ 33,55,-23,-17,40,-32,116,-127,6,85,-12,-13,-2,-42,45,23, 
  /* [2][0][][] */ -69,35,-35,-12,22,0,14,71,-26,12,127,-9,-42,2,22,-34, 
  /* [3][0][][] */ -89,63,51,50,-32,63,78,127,4,81,-100,0,21,-83,-88,-77, 
  /* [4][0][][] */ 29,-7,15,109,-17,100,10,51,14,-19,-11,0,33,26,-127,-28, 
  /* [5][0][][] */ -20,-12,59,-24,22,-33,-10,21,-82,93,-23,-127,-3,15,-71,-45, 
  /* [6][0][][] */ 9,12,38,-13,38,44,-61,-71,-23,-6,41,-21,127,-24,-7,-45, 
  /* [7][0][][] */ 3,11,127,-16,-11,-26,3,-11,-74,21,-60,-40,1,-13,38,-21, 
  /* [8][0][][] */ 37,43,67,70,-63,103,56,59,35,38,12,-127,-19,-2,-127,-76, 
  /* [9][0][][] */ 25,-127,65,46,7,-16,3,24,102,-1,74,6,-52,29,-90,-41, 
  /* [10][0][][] */ -40,-97,1,-39,-118,8,-5,58,75,127,46,-39,-56,36,94,-13, 
  /* [11][0][][] */ 41,-57,13,-105,20,-29,-97,-127,-99,58,-15,-59,41,-40,27,-70, 
  /* [12][0][][] */ -24,19,17,-51,-22,-46,-105,-31,-61,-85,-7,10,12,127,96,43, 
  /* [13][0][][] */ -55,-118,-48,61,18,-79,21,-12,40,18,-23,-1,68,40,127,20, 
  /* [14][0][][] */ -18,-63,53,15,35,30,2,119,15,57,34,-52,15,47,-66,127, 
  /* [15][0][][] */ 18,-29,-14,55,22,-12,104,-3,-5,-127,8,-44,-3,-26,1,-23, 
  /* [16][0][][] */ 27,-83,-48,52,2,3,53,-80,127,64,95,-22,16,117,56,104, 
  /* [17][0][][] */ -80,-64,84,93,85,51,11,-2,75,-60,-21,-61,70,34,-127,35, 
  /* [18][0][][] */ -11,23,-3,27,-92,-21,-6,40,-46,-15,-25,-46,1,-127,53,-11, 
  /* [19][0][][] */ 40,-69,75,-56,110,56,-127,66,50,-93,92,47,0,89,52,85, 
  /* [20][0][][] */ 17,-3,48,-63,6,2,-36,32,-13,-49,104,-15,-1,33,-37,127, 
  /* [21][0][][] */ -59,-19,-20,-58,29,-6,-89,-51,-25,63,0,10,-127,-14,38,3, 
  /* [22][0][][] */ 25,-32,34,-35,-4,-65,5,-9,-127,37,-18,-54,-13,-23,69,-32, 
  /* [23][0][][] */ 24,-5,13,-13,-5,6,-4,8,-7,6,32,-21,127,-16,7,-31, 
  /* [24][0][][] */ -9,18,5,-91,-16,-23,71,15,-48,18,-23,-127,7,-110,61,18, 
  /* [25][0][][] */ -99,47,-3,-15,-13,-92,-81,-75,-24,56,-21,0,-29,-127,-23,-6, 
  /* [26][0][][] */ 36,-22,54,-84,114,-12,29,22,124,-26,24,-30,8,127,-17,84, 
  /* [27][0][][] */ 89,-28,30,-35,-37,-39,-6,-23,-35,19,-127,15,10,-20,1,33, 
  /* [28][0][][] */ -117,-27,-127,-81,62,-5,70,-54,2,57,-76,25,45,-14,-56,54, 
  /* [29][0][][] */ -51,-49,7,127,-22,27,13,-29,-11,-5,-81,44,27,-62,11,-32, 
  /* [30][0][][] */ 9,-5,127,-41,92,52,-26,64,-35,-77,75,-58,14,23,-100,72, 
  /* [31][0][][] */ 28,-109,18,-46,-17,-64,16,-34,0,49,107,36,-12,106,67,127, 
  /* [32][0][][] */ -25,94,-35,57,-127,34,-88,-48,-66,-39,-3,78,7,51,24,63, 
  /* [33][0][][] */ 31,-17,23,127,7,-15,33,-46,-113,55,76,-47,17,-5,12,109, 
  /* [34][0][][] */ 37,-39,37,2,90,-37,-127,-31,-57,121,-73,0,-35,8,2,13, 
  /* [35][0][][] */ 84,39,-4,-9,38,-113,-51,-6,-36,-21,-98,16,127,44,-7,17, 
  /* [36][0][][] */ 14,-7,-127,1,34,5,-17,25,-31,-7,4,-16,-5,10,2,11, 
  /* [37][0][][] */ -9,18,127,-17,-49,20,19,-59,-10,22,-49,33,22,-9,16,4, 
  /* [38][0][][] */ -113,31,13,10,43,78,-11,-43,-11,-27,127,-24,-35,2,7,-21, 
  /* [39][0][][] */ -19,-1,14,35,32,-19,-127,31,7,44,-11,-39,3,-38,-3,-9, 
  /* [40][0][][] */ -27,24,-19,127,11,37,40,38,-47,-3,10,12,17,25,-61,-21, 
  /* [41][0][][] */ 39,27,-68,-14,-64,-16,127,123,-52,65,-39,9,11,109,46,8, 
  /* [42][0][][] */ -12,6,-19,-21,17,-36,-107,2,43,-106,127,15,-60,-13,-98,-12, 
  /* [43][0][][] */ -60,-23,49,-46,37,45,-88,-89,-35,68,-26,-33,-127,-40,7,1, 
  /* [44][0][][] */ -1,11,-28,9,14,-21,-16,-54,127,-26,16,74,-7,72,-5,27, 
  /* [45][0][][] */ -67,-106,26,-90,32,7,-16,65,23,-76,-21,-19,29,113,-50,127, 
  /* [46][0][][] */ -54,29,-44,82,-85,-38,-6,-74,-127,33,-36,-19,-14,34,8,-27, 
  /* [47][0][][] */ -8,-21,-89,127,-6,67,-8,-22,1,62,72,42,4,-9,31,-14, 
  /* [48][0][][] */ -24,-1,19,-127,34,-15,-1,4,-40,29,32,-3,5,70,115,41, 
  /* [49][0][][] */ -67,43,19,93,-12,14,3,-41,27,1,-73,-88,-27,-82,-99,-127, 
  /* [50][0][][] */ -7,83,4,-117,77,5,-20,32,127,-16,-32,-2,0,-59,9,-40, 
  /* [51][0][][] */ 1,-21,30,-18,79,-30,-74,-127,8,-118,39,-2,-30,-15,-23,16, 
  /* [52][0][][] */ 31,14,-21,42,29,-27,-55,98,-64,127,-25,-64,92,88,3,-37, 
  /* [53][0][][] */ -10,124,19,-108,-56,33,57,-11,-74,-100,-70,103,17,-127,-122,-6, 
  /* [54][0][][] */ 4,-3,11,35,44,-24,19,-28,3,38,-19,-30,0,127,-42,-9, 
  /* [55][0][][] */ -127,122,73,-34,50,-8,-21,-6,-44,32,104,-27,-6,-35,112,-4, 
  /* [56][0][][] */ 49,-9,22,-87,85,0,-11,18,31,-50,38,127,-31,15,74,38, 
  /* [57][0][][] */ -26,-16,13,61,-33,34,49,127,-3,12,2,-31,14,47,12,15, 
  /* [58][0][][] */ 5,127,8,-100,2,40,-13,19,87,-14,-5,85,-5,-80,29,46, 
  /* [59][0][][] */ 43,50,59,-112,-53,6,41,2,26,39,15,-78,-15,-127,-74,26, 
  /* [60][0][][] */ 67,-9,127,-83,-78,123,36,-49,-20,63,-51,-37,27,-13,71,23, 
  /* [61][0][][] */ -10,21,-58,-61,-62,27,110,127,-2,41,-45,22,-9,77,27,-21, 
  /* [62][0][][] */ 9,-4,-11,-3,-19,43,-72,-6,-11,-46,-4,-24,-16,-127,66,-12, 
  /* [63][0][][] */ 24,-28,-16,-127,53,-2,-96,-109,-77,99,-27,3,59,0,34,-47, 
  /* [64][0][][] */ -1,-19,26,37,69,1,-23,-127,19,-88,-2,-31,-10,-17,-9,-13, 
  /* [65][0][][] */ -127,19,23,-68,29,62,47,-45,-75,28,53,-12,4,21,-17,-24, 
  /* [66][0][][] */ 70,35,110,26,-73,13,-28,52,-66,-12,83,-99,-19,51,-127,-22, 
  /* [67][0][][] */ 26,17,-70,44,59,-73,-92,-99,26,-126,-83,-65,-127,30,-89,53, 
  /* [68][0][][] */ 26,-38,-33,65,-13,-83,29,-41,-3,15,28,-47,-21,74,127,-24, 
  /* [69][0][][] */ -13,37,-67,74,-18,-106,46,95,41,15,42,-22,127,66,-12,14, 
  /* [70][0][][] */ 28,17,-31,-39,-32,-3,127,123,-15,39,-37,28,11,61,18,17, 
  /* [71][0][][] */ -16,7,-42,-49,32,0,8,55,-32,-51,-7,6,-5,-127,88,9, 
  /* [72][0][][] */ 46,32,-26,37,23,-51,-39,-127,25,78,-72,8,71,60,27,61, 
  /* [73][0][][] */ -41,-127,-18,-55,-75,-16,29,-28,-25,2,-27,-27,19,-48,69,-10, 
  /* [74][0][][] */ -28,30,69,110,-5,9,-127,108,21,-35,-40,-41,1,0,-20,-7, 
  /* [75][0][][] */ -62,34,-64,16,-15,52,70,86,-12,52,-10,-52,-127,58,18,31, 
  /* [76][0][][] */ 6,-31,-22,-26,36,-82,-127,-71,-10,-20,28,-12,5,-40,53,-44, 
  /* [77][0][][] */ -28,5,-16,-36,-55,5,1,-35,127,8,-58,1,5,58,28,-72, 
  /* [78][0][][] */ -95,-127,-5,91,86,66,-35,39,-3,-77,-68,69,25,-15,74,45, 
  /* [79][0][][] */ 41,-5,40,-59,127,13,43,10,75,28,-6,27,-8,-28,14,-48, 
  /* [80][0][][] */ -24,-20,49,-95,-20,-33,18,31,-58,-47,-5,-30,1,127,-27,28, 
  /* [81][0][][] */ 15,-12,44,31,6,47,-30,-12,-3,-17,2,-24,-10,22,-127,12, 
  /* [82][0][][] */ -44,-23,15,-127,1,-38,20,-22,-32,-6,-54,-126,-3,-89,-104,18, 
  /* [83][0][][] */ 16,8,-54,-80,-59,-6,-22,46,-77,10,3,-68,36,-127,12,77, 
  /* [84][0][][] */ 127,39,17,49,-47,-13,-70,19,1,-34,90,28,-82,13,81,-74, 
  /* [85][0][][] */ -9,-16,8,-43,69,-27,-67,88,-84,-127,-51,-61,-22,67,111,-127, 
  /* [86][0][][] */ 24,16,-18,-11,-65,70,-41,31,-111,-44,28,-37,0,-127,-6,27, 
  /* [87][0][][] */ 127,-31,12,-1,-49,-33,11,-6,2,23,-114,7,32,-6,4,30, 
  /* [88][0][][] */ 75,53,-5,1,-9,-18,-51,-19,105,-6,57,38,-30,-21,119,-127, 
  /* [89][0][][] */ 33,77,-77,-11,-37,-19,15,-69,46,39,25,-45,-35,-7,-38,-127, 
  /* [90][0][][] */ -22,-10,16,-62,-94,8,117,-62,84,-61,27,-127,59,-37,-62,-14, 
  /* [91][0][][] */ 10,6,-20,-99,-18,-16,7,-63,-58,-3,76,41,19,-6,41,127, 
  /* [92][0][][] */ 35,10,5,17,49,-13,-97,-127,80,-84,-5,-12,-46,9,1,-25, 
  /* [93][0][][] */ 56,8,36,-127,-38,19,-18,42,41,-63,73,-24,-31,105,-32,20, 
  /* [94][0][][] */ -123,66,-81,6,72,-127,-20,-8,4,-49,65,-10,-18,-16,-6,13, 
  /* [95][0][][] */ -21,45,15,-127,-15,-9,-25,6,32,-17,-79,-72,-2,23,-99,-41, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00071745918830856681, 0.00047183767310343683, 0.00060297665186226368, 0.00032627271139062941, 0.00039849660242907703, 0.00092145474627614021, 0.0016964274691417813, 0.0010998476063832641, 0.00027815243811346591, 0.001015367335639894, 0.00095590204000473022, 0.00056258897529914975, 0.00053174997447058558, 0.00069802021607756615, 0.00025100357015617192, 0.0015335512580350041, 0.00070046191103756428, 0.00045488818432204425, 0.00058424670714884996, 0.0005761939100921154, 0.0011168300407007337, 0.0014106568414717913, 0.00043947840458713472, 0.0023253057152032852, 0.0012640859931707382, 0.00066383281955495477, 0.00062025972874835134, 0.00070264248643070459, 0.00083188572898507118, 0.00031223634141497314, 0.00017671883688308299, 0.00053273024968802929, 0.00054665416246280074, 0.00098654476460069418, 0.00065060338238254189, 0.00069355271989479661, 0.00113762600813061, 0.0013487746473401785, 0.00039434566861018538, 0.0022145651746541262, 0.00056553707690909505, 0.00050192751223221421, 0.00022014010755810887, 0.00073823489947244525, 0.0004350148665253073, 0.00058615661691874266, 0.00087756634457036853, 0.00062705681193619967, 0.0002118130651069805, 0.00076094944961369038, 0.00064960855524986982, 0.0007220673724077642, 0.0010706731118261814, 0.00067494518589228392, 0.0014734601136296988, 0.00037118763430044055, 0.00069267564686015248, 0.00041435437742620707, 0.0011834148317575455, 0.00046485464554280043, 0.00071554566966369748, 0.00032766882213763893, 0.00090194871881976724, 0.00051460316171869636, 0.0010038567706942558, 0.00061090040253475308, 0.00073719228385016322, 0.00079562194878235459, 0.00083002110477536917, 0.00069377990439534187, 0.0006974788848310709, 0.00044299187720753253, 0.00036574318073689938, 0.00061794382054358721, 0.00094719574553892016, 0.0013633746420964599, 0.00090698152780532837, 0.0012291905004531145, 0.00093912007287144661, 0.00091898173559457064, 0.00049358006799593568, 0.00038852725992910564, 0.00051393907051533461, 0.00037443317705765367, 0.0012783689890056849, 0.00091228901874274015, 0.00071546377148479223, 0.00015364310820586979, 0.00050850800471380353, 0.00061396171804517508, 0.00060932792257517576, 0.0012216956820338964, 0.00079328840365633368, 0.00077833962859585881, 0.00060117954853922129, 0.00046970631228759885, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 2326, 6842, -7492, 27436, 26019, -2917, -15996, -7725, 17942, -489, 26358, 16332, -17232, 7879, 33732, -33743, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00046307529555633664, 0.00028388053760863841, 0.0003137288149446249, 0.00024097332789096981, 0.00042374589247629046, 0.00030874859658069909, 0.00032417965121567249, 0.00043470636592246592, 0.00022565311519429088, 0.00030896902899257839, 0.00037519875331781805, 0.00077397446148097515, 0.0004093343741260469, 0.00040323642315343022, 0.00053642358398064971, 0.00030649872496724129, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -4,15,-11,7,49,75,-31,-30,49,2,18,10,-11,6,24,63,3,-9,-8,-7,108,-62,6,-39,-30,-32,-51,-115,-1,0,53,46,115,-9,-9,-6,9,-10,-40,12,-31,22,14,-30,-9,-35,-18,30,-12,16,10,-9,-41,-13,-8,-1,33,25,-25,-35,-61,22,-17,-4,19,5,43,-1,6,2,10,-31,-73,-4,9,3,-14,-90,12,-16,46,-12,-75,-66,32,-15,5,24,-4,13,20,-32,29,23,-10,127, 
  /* [1][0][][] */ 58,-93,31,106,-29,-65,-6,-55,-25,-83,-13,39,15,-77,-25,-64,-87,1,27,12,-56,-122,-26,31,127,-68,-64,35,-30,103,-11,52,24,20,-64,14,-24,-31,58,-45,14,-100,89,-18,-48,7,71,-19,26,2,16,-57,80,-89,29,-52,8,40,-25,-114,51,-63,44,-58,-12,-93,45,45,34,60,-67,0,-121,48,-33,66,34,92,27,-14,37,3,-55,47,-87,56,-14,70,-28,-25,17,13,-11,-43,35,-21, 
  /* [2][0][][] */ 17,14,7,-12,13,-19,-1,28,39,-14,0,57,0,4,49,-6,-11,-2,14,-12,-27,-60,9,-35,11,-16,-9,31,-7,25,99,-53,21,-47,-26,49,17,127,-45,-29,7,-13,10,22,-33,-45,-47,3,28,7,-23,-22,38,1,0,-39,-22,7,1,33,8,3,55,87,-7,-68,8,-55,-12,-11,-11,11,-28,13,-29,19,22,56,10,24,6,69,38,-21,-10,4,9,14,21,1,-5,-51,-54,3,-10,44, 
  /* [3][0][][] */ -15,-15,-37,25,31,-25,-9,-21,-10,12,7,8,0,-5,50,-3,50,-49,9,22,-6,-5,-1,7,-15,21,1,-14,9,-53,55,-6,14,-14,-14,40,-13,-18,6,20,10,-70,7,-19,-7,5,11,3,-127,48,-5,21,-127,-54,-31,-35,29,2,-12,60,-16,43,17,16,-12,-85,-39,27,50,18,8,26,-30,14,-6,-48,-49,-64,28,-49,24,-12,0,69,53,68,49,22,35,-10,3,12,-19,-2,-12,-21, 
  /* [4][0][][] */ -16,-14,13,-56,-13,-19,-44,-5,-21,-37,-36,3,8,52,15,4,36,-6,4,-6,-15,32,55,11,-12,-6,21,29,14,-1,-11,-9,-29,5,5,15,33,-26,0,-12,16,-3,-83,-20,37,-8,-4,-10,2,63,-13,-8,-21,-7,-1,-8,3,-22,17,39,9,11,11,-2,28,-103,24,-14,-46,8,-29,4,-18,5,-30,24,-8,61,47,12,2,5,127,-28,41,-31,-10,-4,61,-3,-1,26,-35,27,-8,-36, 
  /* [5][0][][] */ -5,-6,-1,-13,5,-8,-9,119,62,-15,-13,-35,-8,31,49,40,-5,-14,0,-20,-33,-6,-10,-50,4,24,23,71,57,4,63,53,-37,13,9,5,-40,-67,-15,1,-52,-9,-13,-8,73,17,11,14,17,16,-14,4,-31,-11,3,1,-31,-27,5,40,-51,41,-16,-47,22,14,-26,7,-2,25,21,7,44,15,5,0,-13,33,5,116,0,-33,12,33,10,-1,33,-32,-3,-21,22,-127,-34,-24,-6,-115, 
  /* [6][0][][] */ -28,-13,-4,-73,5,-19,-16,23,10,19,-5,-6,43,-58,9,5,11,-74,33,28,18,5,-28,26,78,9,-8,-15,10,-19,8,-1,-16,-9,-24,5,28,-3,35,66,-15,-31,-62,-33,-5,-21,27,-127,23,51,14,7,6,1,9,-44,35,-15,0,4,14,25,-9,8,66,77,23,-24,-13,-4,34,-21,37,6,66,-6,-29,34,-7,2,-6,9,38,-36,8,53,37,-25,22,9,-29,-5,-23,10,-4,27, 
  /* [7][0][][] */ 16,3,31,-19,4,18,-2,-15,0,-11,-10,-20,6,-77,33,5,10,-34,-15,-10,20,-10,-24,-1,-14,-1,3,-27,-4,5,6,6,-1,4,-5,-16,6,-7,-30,22,9,-15,-19,30,-8,9,-14,59,-9,19,-8,-14,-15,4,2,-45,26,1,5,1,6,4,-7,2,-5,45,15,-33,-4,-5,3,35,-4,-12,-12,3,33,10,-2,-14,12,-38,32,-1,-25,127,3,5,-25,-7,4,11,-20,-1,-2,-2, 
  /* [8][0][][] */ -63,33,-44,-2,45,11,-22,29,28,68,-38,-1,5,39,59,-2,-2,25,-90,21,37,29,-39,-1,-52,-22,7,17,49,-100,7,4,19,-6,21,3,-11,27,-33,63,0,23,3,-127,-35,-7,38,-13,-32,42,-7,66,-104,92,14,6,10,-25,-34,-28,0,-46,25,20,-11,37,30,-33,-2,-17,60,72,-15,34,48,28,-8,-88,-6,-49,-16,4,17,15,-50,19,23,-57,-7,44,-30,4,42,-22,-14,-11, 
  /* [9][0][][] */ 25,-61,-14,-28,19,34,-15,16,3,-15,9,9,-39,-14,1,11,-5,9,34,-31,-14,-5,-17,-33,49,1,27,-23,-44,-35,-22,-5,-15,28,17,19,16,59,-56,8,24,8,-20,-93,-8,-19,29,-115,-37,-7,-5,20,-3,17,-14,2,-51,32,-19,26,12,0,8,20,21,127,41,37,18,-23,6,-22,-13,-12,-31,8,62,-16,23,20,-22,-22,14,-45,-8,50,-1,3,-41,31,-24,-2,5,13,6,-18, 
  /* [10][0][][] */ 22,49,-28,37,71,-111,-8,-23,-9,50,22,-8,-9,2,23,-76,17,41,-28,33,-91,-17,-6,-14,-55,-24,-40,59,3,7,2,47,-8,0,36,-8,89,-15,-17,-4,-8,66,51,-18,-49,-19,-34,-1,-15,-10,-31,-2,-4,-14,1,-14,4,32,-19,-8,2,18,-16,28,2,43,43,36,26,1,35,64,-55,-28,-63,-11,-7,24,-16,7,26,-20,-59,-40,61,-47,104,6,-22,3,17,-21,75,31,-17,-127, 
  /* [11][0][][] */ 57,34,-24,16,1,10,51,11,-1,-29,-23,-21,-1,9,27,7,3,-9,-96,-10,11,20,-4,-7,-31,-12,-17,1,7,12,2,-3,-5,1,16,29,15,16,0,27,-11,33,58,-112,29,-33,-11,1,-127,20,1,-55,13,17,-5,16,-6,-23,13,1,10,-16,-22,9,-48,55,-20,17,23,4,34,11,-45,-21,13,30,1,-26,-61,1,18,7,81,42,13,-9,-9,-14,3,26,-20,-6,10,4,-19,21, 
  /* [12][0][][] */ -23,-4,19,0,-25,42,13,10,127,-3,-16,-3,2,11,-48,-36,19,24,6,69,58,29,-6,-22,10,6,22,-33,-100,1,32,-37,13,5,-14,-12,13,7,46,-11,-64,-15,1,8,8,41,5,-6,33,9,-49,2,11,-5,11,-13,74,-18,10,18,26,-16,-6,5,-6,32,-38,8,13,3,-12,-26,20,12,-74,4,35,4,3,-70,-11,-5,49,37,-13,1,-23,-23,3,20,5,38,-25,-25,18,20, 
  /* [13][0][][] */ 35,-16,-23,25,35,9,8,12,-1,-1,12,-10,17,-9,12,-1,21,-77,-36,13,-4,-17,2,3,9,19,-4,-7,-18,-45,-6,25,9,1,10,45,22,-1,4,28,-4,15,21,35,20,22,-19,-127,27,5,0,6,-16,1,20,4,-7,13,25,11,11,22,-11,7,-4,-16,-23,-56,13,18,2,-23,-8,37,-8,21,-30,8,12,1,33,-4,-25,16,15,38,14,14,-8,8,24,-8,8,13,-7,-8, 
  /* [14][0][][] */ -93,-45,20,40,19,-34,-34,1,-24,0,-8,12,45,-1,-127,-5,59,-3,-16,37,-23,2,34,24,-96,-5,16,-5,-30,-70,-30,-3,-16,-2,38,-74,31,40,-10,6,31,42,-8,-27,12,106,56,60,-95,54,11,29,-52,-11,35,-4,18,2,61,53,34,42,19,41,-4,-12,-45,39,3,67,-43,-66,-67,-9,0,45,-13,33,76,-7,45,31,27,19,33,9,47,27,19,52,51,8,22,28,17,-16, 
  /* [15][0][][] */ 102,-22,52,8,-8,90,30,-15,-1,43,11,-8,-90,-5,-26,40,8,39,39,-21,16,30,-98,63,20,7,35,-17,27,36,-65,-78,1,-58,57,13,39,-45,-63,-103,-8,43,2,47,-5,61,-31,-25,106,-33,-60,23,39,-112,60,-102,11,-68,16,17,-127,-14,17,22,87,-9,-47,42,-15,66,-18,11,52,25,14,-5,24,-46,58,-19,-15,0,40,93,-17,1,-8,-69,-3,6,79,-5,-56,56,24,-5, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.019680699333548546, 0.012064922600984573, 0.013333474285900593, 0.010241365991532803, 0.018009200692176819, 0.013121815398335457, 0.013777635060250759, 0.018475020304322243, 0.0095902569591999054, 0.013131183572113514, 0.015945946797728539, 0.032893914729356766, 0.017396710813045502, 0.017137547954916954, 0.022798001766204834, 0.013026195578277111, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 9843, -9518, 3095, 53910, -1843, -4574, -9270, 4320, -2407, 539, 2288, -681, 2379, -6461, 5108, -5794, -397, 16909, 24357, 2271, 3821, -3142, -553, 22, 18535, -316, -382, -3930, -5375, -7898, 6296, -9015, -325, -854, -420, 11151, 1970, -3881, 22029, 638, -251, 2193, -8918, -7127, -7102, 65386, -509, 17725, 35118, -12436, -175, 5488, 7346, -736, -6320, 2235, -10931, 2091, 1374, -7157, -2314, 27, -12168, -861, 1202, 16775, 29800, 19212, -12106, -81, -7765, -1278, 44121, 11255, -101, 645, 18633, 35135, -740, -8256, -1775, -6378, 616, -2864, 569, 1646, 1306, -194, 1787, -1717, -82, 244, -637, -496, 44, 50807, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020539227989502251, 0.00011154569801874459, 0.00021505211771000177, 3.9579525036970153e-05, 0.00016184517880901694, 0.0001647978788241744, 0.00036300983629189432, 9.1433546913322061e-05, 0.00013420131290331483, 0.0004551204910967499, 0.00017880382074508816, 0.00040084609645418823, 9.5175535534508526e-05, 0.00037165876710787416, 0.00020106481679249555, 0.00013309215137269348, 9.5447678177151829e-05, 0.00031388911884278059, 6.4641681092325598e-05, 0.00026033591711893678, 4.4139276724308729e-05, 0.00017795298481360078, 0.00013789325021207333, 0.00037413375684991479, 0.00018486176850274205, 0.00025050289696082473, 0.00012714494368992746, 0.00017799060151446611, 0.00014538639516104013, 7.9516357800457627e-05, 0.00013356769341044128, 0.00018555822316557169, 0.00012025316391373053, 0.00012680186773650348, 0.00021708470012526959, 0.00021461032156366855, 0.00035543888225220144, 0.00012316933134570718, 5.5298285587923601e-05, 0.00015545751375611871, 0.00032896501943469048, 0.00032952765468508005, 0.0004273632075637579, 0.00016651210898999125, 0.0002193784894188866, 5.5580367188667879e-05, 0.0002104313753079623, 0.00018856153474189341, 7.5291063694749027e-05, 0.00020941121329087764, 0.00025661021936684847, 0.00025984592502936721, 0.00022752421500626951, 0.00029119788086973131, 0.00028883354389108717, 0.00043668178841471672, 0.00040165812242776155, 0.00022060840274207294, 0.0001119500957429409, 8.890029857866466e-05, 0.00030342681566253304, 0.00012820829579140991, 0.00030408496968448162, 0.00012996833538636565, 0.00022400372836273164, 0.00017105424194596708, 8.2362952525727451e-05, 8.7315769633278251e-05, 0.00034204527037218213, 0.00024606639635749161, 0.00022137351334095001, 0.00011098211689386517, 0.00013242808927316219, 0.00015517314022872597, 0.00015110381355043501, 0.00023994315415620804, 0.00051000795792788267, 5.002936813980341e-05, 0.00026283375336788595, 0.0002290139818796888, 0.00015607738168910146, 0.00031712220516055822, 0.00012598710600286722, 0.0001309647923335433, 0.00012243853416293859, 9.4542410806752741e-05, 0.00013809600204695016, 0.00018903161981143057, 0.00019377841090317816, 0.00011561519932001829, 0.0001931066217366606, 0.00011984618322458118, 0.00014045061834622175, 0.00043158719199709594, 0.027734283357858658, 7.5335643487051129e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-21,107,-17,25,-63,-54,17,-5,100,-8,4,-10,-5,56,7,18,-37,3,75,2,34,-33,3,17,42,49,21,12,24,49,-7,26,9,-15,4,49,-58,-26,22,8,26,17,-83,-54,26,-6,-9,-20,-8,-6,49,6,-8,2,-3,-34,26,-30,27,-4,127,28,-13,-10,11,-50,65,35,2,-7,76,-33,70,4,17,-127,30,66,2,13,127,-15,37,29,-27,-20,34,-9,-13,79,2,19,-2,11, -49,12,-9,10,53,-6,-11,-127,39,15,-127,-5,-18,-13,4,95,16,-30,-17,-16,79,-97,127,27,-60,-32,-106,-15,27,36,-49,17,119,12,-13,-1,-23,127,-63,-127,9,-19,-30,12,48,-127,127,-45,-74,50,50,7,40,-64,32,57,37,41,-99,84,127,34,4,-19,42,-38,-96,1,37,-29,-17,46,-50,-46,107,-4,-29,-61,-32,65,-66,60,-16,8,-11,48,55,-40,-28,49,-12,70,-127,-31,23,-127, 0,-5,-24,-75,9,20,37,20,-3,-1,7,62,0,-13,-11,9,-13,19,-18,15,6,24,23,-32,1,-31,9,14,-7,8,47,-79,44,16,10,-24,11,5,-32,-21,9,3,-16,9,25,-32,23,0,7,-7,7,-4,5,6,-5,8,-7,44,6,-2,12,-17,4,-16,-26,-17,28,-48,-106,-6,44,-19,-127,-22,-9,15,10,-13,8,10,-13,25,-37,-3,-40,21,26,36,-24,-18,25,-11,19,6,-2,-45, 
  /* [0][1][][] */ -40,58,-18,38,-84,-15,-12,-45,24,96,-45,-21,-29,-26,-6,62,127,-25,-91,-12,58,-127,-27,16,-35,-47,-127,-6,38,36,-50,27,-127,-75,-55,3,63,-2,-52,48,-18,85,1,-1,35,-50,-12,-32,127,43,-3,20,45,9,-34,-16,31,10,-121,127,-35,-92,19,127,-58,-36,-84,123,-38,127,-18,54,-37,-55,36,9,-35,-70,127,48,127,36,6,-1,127,30,-95,47,-39,-36,-102,38,98,103,29,-57, 127,127,127,127,-44,-127,127,21,127,-127,17,-127,-110,127,127,127,-15,-127,-60,-127,127,24,-65,127,127,127,-56,-127,127,127,-127,127,-10,-127,-121,127,-127,-44,101,109,-127,-127,127,127,127,-118,-106,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-40,41,-104,-29,-72,-68,127,127,-70,127,127,-105,-127,127,-43,127,-127,-127,-127,123,-76,127,-44,127,81,127,-38,-127,-24,-106,-127,-127,-22,-127,-22,-127,-127,117, -24,65,-38,4,127,72,-23,46,5,24,-12,-5,-28,-31,-14,-5,-105,-22,-127,38,31,78,-12,-115,-34,-41,121,74,10,37,73,9,124,-49,127,-4,54,6,-96,14,36,23,-22,3,-22,-52,-12,-43,81,16,-12,40,-5,-3,-73,-14,25,20,127,-88,4,127,-1,-35,-108,-29,-76,98,15,-16,114,24,-18,-57,15,46,-29,-8,-43,-3,-45,11,48,26,-90,35,127,-45,32,-23,127,-10,-113,36,33,19, 
  /* [0][2][][] */ -5,-41,-21,-63,-5,16,40,30,-2,11,-18,51,23,-35,-7,8,42,2,12,21,-7,31,-16,-26,2,-25,8,4,-9,-5,51,-75,-39,65,-27,-27,31,-33,-63,17,10,9,-34,19,14,-76,-10,-1,-8,6,18,-7,7,1,-20,7,-2,44,-47,35,-3,-15,3,18,-5,-10,20,-52,-55,11,-22,-13,-118,-33,0,17,14,-13,58,18,22,23,-39,15,13,26,-20,10,4,25,22,-7,22,41,-7,-30, -28,-11,-27,24,-44,77,-26,63,6,-5,54,-12,127,-7,-18,-16,1,-43,-60,23,-20,80,-44,-111,-47,-47,99,71,14,48,55,-1,-123,61,-14,-24,-28,-25,-127,-3,44,-14,-15,35,-23,-44,-17,-47,-59,27,69,25,-11,-80,31,53,18,25,75,-54,22,-59,-10,1,20,-27,-127,-54,-10,-27,-62,23,36,-45,-28,-9,-44,22,-56,4,48,35,20,11,6,64,-93,127,16,124,-32,-19,114,-21,46,83, -10,-35,-26,31,13,66,-44,11,4,-6,-1,13,11,-51,-9,-11,-45,-6,16,20,-24,6,-20,4,-4,19,-3,51,-1,-4,34,29,18,41,19,-24,-7,-25,-25,8,13,-12,21,8,-73,-33,-13,4,-1,-18,0,-4,-9,9,-16,-5,-1,-52,14,-28,-19,48,10,-29,-9,-3,35,-53,47,7,55,-21,31,-58,-14,20,10,9,-5,24,-29,32,89,-14,-18,54,40,-7,109,11,3,-19,12,-20,-7,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0087291719391942024, 0.0047406922094523907, 0.0091397147625684738, 0.0016821298049762845, 0.0068784197792410851, 0.0070039099082350731, 0.015427917242050171, 0.0038859257474541664, 0.0057035554200410843, 0.019342619925737381, 0.0075991624034941196, 0.017035959288477898, 0.0040449602529406548, 0.015795497223734856, 0.0085452543571591377, 0.0056564160622656345, 0.0040565263479948044, 0.01334028784185648, 0.0027472714427858591, 0.011064276099205017, 0.0018759191734716296, 0.0075630014762282372, 0.0058604632504284382, 0.015900684520602226, 0.0078566251322627068, 0.01064637303352356, 0.0054036602377891541, 0.0075646005570888519, 0.0061789215542376041, 0.003379445057362318, 0.0056766271591186523, 0.0078862244263291359, 0.0051107592880725861, 0.0053890794515609741, 0.0092260995879769325, 0.0091209383681416512, 0.01510615274310112, 0.0052346964366734028, 0.0023501771502196789, 0.0066069443710148335, 0.013981013558804989, 0.014004925265908241, 0.018162935972213745, 0.0070767644792795181, 0.0093235857784748077, 0.0023621656000614166, 0.0089433332905173302, 0.0080138649791479111, 0.0031998699996620417, 0.0088999764993786812, 0.010905934497714043, 0.011043451726436615, 0.0096697788685560226, 0.012375909835100174, 0.012275424785912037, 0.01855897530913353, 0.017070470377802849, 0.0093758571892976761, 0.0047578788362443447, 0.0037782625295221806, 0.012895639054477215, 0.0054488522000610828, 0.012923611328005791, 0.0055236541666090488, 0.0095201581716537476, 0.0072698048315942287, 0.0035004254896193743, 0.0037109199911355972, 0.014536923728883266, 0.010457822121679783, 0.0094083743169903755, 0.0047167399898171425, 0.0056281937286257744, 0.0065948581323027611, 0.006421911995857954, 0.010197583585977554, 0.021675337105989456, 0.002126248087733984, 0.011170434765517712, 0.0097330939024686813, 0.0066332886926829815, 0.013477693311870098, 0.005354451946914196, 0.0055660032667219639, 0.0052036377601325512, 0.0040180524811148643, 0.0058690798468887806, 0.0080338437110185623, 0.0082355821505188942, 0.0049136457964777946, 0.0082070315256714821, 0.0050934627652168274, 0.0059691509231925011, 0.018342455849051476, 1.1787070035934448, 0.0032017647754400969, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 19370, 1764, 7215, -630, 4308, 5288, 20956, 6627, -1423, 23919, 7065, 3005, 6277, 41174, -905, -1874, 8271, 11573, 2395, -181, -773, 14276, 6628, 4775, 7438, 5435, 4301, 5130, 90, -61, 11091, 12190, 14231, 2133, 8910, -560, 18906, 7992, 963, 5510, 1328, 11723, 17564, 3988, 3936, 16693, 16000, 4472, 4104, 3447, 231, -936, 15343, 6715, 6633, 14767, -267, 7696, 2568, 4341, 14157, 8387, 4587, 9821, 7261, 4528, 6072, -781, 13787, 6867, 9847, -1370, -1425, 3206, 2285, 2821, 22228, 17128, 15824, -2738, 4592, -5395, -2121, 627, 7457, 5739, 7674, 4012, 13867, 4351, 8715, 4100, 16598, 30228, -12029, 13847, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013495588791556656, 0.00020481781393755227, 0.00018804286082740873, 0.0008561168797314167, 0.00036424861173145473, 0.00016928432160057127, 0.00014993960212450475, 0.00053249974735081196, 0.00034325433080084622, 7.6433076173998415e-05, 0.00020089439931325614, 0.00028499015024863183, 0.00044237449765205383, 0.00011782885121647269, 0.00019377142598386854, 0.00038786529330536723, 0.0002694178547244519, 0.0001980695960810408, 0.00020957065862603486, 0.00062286009779199958, 0.00037646520650014281, 0.0001726194896036759, 0.00022312214423436671, 0.00016365232295356691, 0.00024033819499891251, 0.00038534079794771969, 0.00034091254929080606, 0.00016965957183856517, 0.00058816059026867151, 0.00033109390642493963, 0.00013299485726747662, 0.00015475704276468605, 0.00013775401748716831, 0.00050933030433952808, 0.0001819321041693911, 0.00048284677905030549, 0.00012087879440514371, 0.00032266051857732236, 0.00048612712998874485, 0.000169163424288854, 0.00040041195461526513, 0.00015783699927851558, 0.00012299510126467794, 0.00018187781097367406, 0.00028342017321847379, 0.00019553325546439737, 0.00017808520351536572, 0.00032038782956078649, 0.00038099483936093748, 0.00025912944693118334, 0.0004402919439598918, 0.00072267785435542464, 0.00017410285363439471, 0.00023884909751359373, 0.00034469948150217533, 0.00012631263234652579, 0.00031765125459060073, 0.00022478241589851677, 0.00030306150438264012, 0.00036638794699683785, 0.00011921031546080485, 0.00016860882169567049, 0.00023558018438052386, 0.00028054407448507845, 0.00013560046500060707, 0.00024307121930178255, 0.00032406501122750342, 0.00044389278627932072, 0.00019341618462931365, 0.00017034403572324663, 0.00019986341067124158, 0.00033241318305954337, 0.00025283329887315631, 0.00041069739381782711, 0.00018979671585839242, 0.00044896025792695582, 0.00010680636478355154, 0.00026176311075687408, 0.00010377551370766014, 0.0004309194628149271, 0.00023790106934029609, 0.00038628242327831686, 0.0001884493394754827, 0.00044543747208081186, 0.00021292464225552976, 0.0002709561085794121, 0.00021001079585403204, 0.00033435664954595268, 0.00012329929450061172, 0.00037428506766445935, 0.00016055762534961104, 0.00042210440733470023, 0.00012642402725759894, 9.2175367171876132e-05, 0.00024478614795953035, 0.00023681494349148124, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 44,-11,114,127,72,-15,31,-44,111,-34,-50,-72,28,108,-29,-81, 
  /* [1][0][][] */ 53,53,26,-19,76,20,31,57,76,69,-42,127,12,-10,107,-90, 
  /* [2][0][][] */ 16,-38,-6,-14,-55,46,-44,89,-82,-94,5,76,-30,-127,94,-95, 
  /* [3][0][][] */ 125,127,-4,31,-110,-17,-68,-36,-4,0,101,-56,-68,86,-45,-36, 
  /* [4][0][][] */ 0,0,14,9,-24,10,-19,25,-49,-34,-6,-4,-8,-127,26,-1, 
  /* [5][0][][] */ 120,-41,-41,-2,2,-127,-13,11,4,6,-117,-12,17,0,-2,21, 
  /* [6][0][][] */ -116,-85,-10,109,-69,19,-38,43,-127,-71,-82,-45,9,74,-22,96, 
  /* [7][0][][] */ -13,14,-70,36,34,-127,-10,35,6,-20,8,-12,-6,15,-28,18, 
  /* [8][0][][] */ 50,-71,-7,-14,-8,39,-54,-65,-16,17,-95,-6,-127,-1,-1,30, 
  /* [9][0][][] */ 21,-71,68,125,17,23,21,-81,127,-119,6,-20,-7,71,-58,48, 
  /* [10][0][][] */ -88,-77,-36,-22,82,68,40,67,113,-82,-84,29,79,-84,-127,80, 
  /* [11][0][][] */ 26,-22,-127,42,56,34,-40,47,-10,-46,0,-4,13,33,-71,0, 
  /* [12][0][][] */ 115,-49,3,1,4,-44,-44,-9,18,9,-127,-22,-54,-13,3,57, 
  /* [13][0][][] */ 106,-107,29,-127,119,71,-49,-72,123,-13,45,61,70,48,109,42, 
  /* [14][0][][] */ -54,28,-107,-40,80,-126,74,-51,51,43,0,-123,38,127,-19,27, 
  /* [15][0][][] */ 35,0,57,34,45,-41,-41,-2,15,-50,-85,-17,-127,-61,-23,60, 
  /* [16][0][][] */ -127,64,6,16,15,82,31,69,-14,27,102,21,-2,-2,7,-64, 
  /* [17][0][][] */ -2,-9,-46,-28,-33,21,37,82,-13,127,-31,7,6,79,60,2, 
  /* [18][0][][] */ 11,127,-46,-5,3,4,54,-61,18,99,-44,88,-18,-45,46,-91, 
  /* [19][0][][] */ 6,-15,41,13,11,44,-11,10,2,-5,-43,-11,-127,2,-12,29, 
  /* [20][0][][] */ 92,-45,-17,-84,-24,25,17,-80,-53,39,-127,-35,22,-3,44,26, 
  /* [21][0][][] */ 55,4,127,25,-17,65,30,-2,-5,38,-16,-31,-13,90,4,-11, 
  /* [22][0][][] */ 42,-21,22,14,-32,17,10,127,14,-5,-11,43,5,54,21,31, 
  /* [23][0][][] */ -48,35,-83,0,20,-127,21,25,-1,-24,8,-18,-88,-17,7,25, 
  /* [24][0][][] */ 33,-49,-4,-56,51,1,-18,-8,23,32,67,88,-26,78,127,50, 
  /* [25][0][][] */ -127,-92,-54,-5,16,-3,-15,-56,-73,-18,-82,29,25,36,17,58, 
  /* [26][0][][] */ 4,12,33,-6,-12,8,-21,58,-68,-50,-11,0,1,-127,34,-15, 
  /* [27][0][][] */ -124,46,-41,28,31,-17,5,19,30,-27,127,10,-33,-15,-1,-38, 
  /* [28][0][][] */ -18,-12,24,41,-1,7,20,92,21,18,-22,-4,-127,-12,-21,37, 
  /* [29][0][][] */ -18,49,38,-50,34,-19,14,-29,-127,19,-22,11,5,40,-72,14, 
  /* [30][0][][] */ -20,1,-127,-63,28,-68,1,6,-40,-11,-6,-25,-61,-52,29,17, 
  /* [31][0][][] */ 107,-30,-127,12,36,0,-50,50,-15,-5,-92,-43,19,-21,-85,63, 
  /* [32][0][][] */ -127,51,24,31,21,67,40,27,16,15,124,6,-46,-14,-32,-22, 
  /* [33][0][][] */ 4,-12,127,-30,-72,25,5,-53,-7,27,-18,26,-19,13,58,24, 
  /* [34][0][][] */ -47,-41,-49,-112,55,-3,14,-59,-6,-63,-30,-127,-39,-14,80,14, 
  /* [35][0][][] */ 3,-36,36,52,48,-10,7,-7,-96,22,-14,30,-10,127,-43,-38, 
  /* [36][0][][] */ -104,50,-45,-14,-34,48,56,92,-12,46,127,-22,21,13,20,-6, 
  /* [37][0][][] */ -50,13,127,-15,-72,-62,49,-18,22,39,-9,5,9,-47,39,3, 
  /* [38][0][][] */ 16,-12,-10,31,22,-32,-47,4,-17,-19,61,-5,127,21,-25,-1, 
  /* [39][0][][] */ -37,12,-8,-80,-64,-92,85,127,-54,-2,19,-60,8,26,53,68, 
  /* [40][0][][] */ 67,-5,2,-3,4,108,-50,-7,-1,-16,33,7,127,17,-51,-35, 
  /* [41][0][][] */ -14,-5,-40,-127,18,9,-18,-70,1,-49,18,-46,-14,-9,-14,39, 
  /* [42][0][][] */ 48,30,13,105,-83,21,-85,11,-62,-75,60,-53,-20,127,-48,-1, 
  /* [43][0][][] */ 10,100,-18,127,37,11,27,-72,-35,94,-3,17,13,-32,30,23, 
  /* [44][0][][] */ -1,-31,-127,34,55,105,-49,70,-6,-28,49,-26,-11,-18,-50,-4, 
  /* [45][0][][] */ 10,29,7,-127,-31,6,48,-22,-21,15,-47,20,-10,-118,32,-51, 
  /* [46][0][][] */ 14,25,46,-11,10,9,-39,39,7,-44,-27,14,21,127,58,-13, 
  /* [47][0][][] */ 17,-31,31,-45,-35,20,-49,63,-11,-35,12,39,1,-127,46,16, 
  /* [48][0][][] */ 1,-8,14,-127,-5,-18,-6,5,13,-27,12,-6,11,39,-6,53, 
  /* [49][0][][] */ 21,-22,-17,111,107,11,3,39,-64,15,44,43,-21,31,127,-6, 
  /* [50][0][][] */ -6,-7,33,0,21,127,-7,-37,41,-27,96,54,80,-1,-10,-50, 
  /* [51][0][][] */ 22,40,14,16,22,6,-33,22,45,5,6,127,17,29,19,-52, 
  /* [52][0][][] */ -18,63,127,12,7,-24,2,-45,-21,19,5,30,-7,83,-119,-27, 
  /* [53][0][][] */ -2,-25,-31,-127,-56,7,20,-15,-19,25,16,-8,25,-14,32,8, 
  /* [54][0][][] */ 7,15,-43,-46,13,11,-17,3,56,-10,5,-36,-14,127,12,39, 
  /* [55][0][][] */ -1,-27,-46,17,16,-30,-25,-127,23,-85,-21,-11,-23,-69,-31,-23, 
  /* [56][0][][] */ 38,42,38,71,6,-18,11,127,26,-22,1,-27,68,-7,-62,36, 
  /* [57][0][][] */ 86,-41,127,-27,-75,-41,-3,-25,22,-3,-96,22,81,-30,33,10, 
  /* [58][0][][] */ 99,92,6,108,-127,-3,6,45,-13,26,70,-39,-66,-47,-31,-76, 
  /* [59][0][][] */ 127,-45,-4,1,-24,-16,8,19,-26,26,-93,-17,26,7,-5,34, 
  /* [60][0][][] */ -127,36,1,-2,1,1,21,22,-3,14,73,-11,-42,-2,23,-24, 
  /* [61][0][][] */ -90,79,6,45,76,-19,-57,-99,127,-83,27,10,46,-71,-78,-68, 
  /* [62][0][][] */ -13,-76,-113,83,39,127,-12,119,45,-57,7,-30,-57,26,-80,-15, 
  /* [63][0][][] */ -52,18,127,-55,-56,-57,29,-31,6,2,-4,9,-18,-50,66,10, 
  /* [64][0][][] */ 19,75,-23,29,57,-2,58,-122,-33,127,18,-15,-16,-116,-14,49, 
  /* [65][0][][] */ 5,29,12,-14,66,23,-23,-127,-19,-64,-19,-40,-7,-27,25,7, 
  /* [66][0][][] */ -127,-5,-25,10,-30,32,13,-36,-83,-42,-97,70,56,27,51,89, 
  /* [67][0][][] */ -6,-38,-10,127,2,-19,-39,25,48,32,-9,-12,-22,-46,-85,-15, 
  /* [68][0][][] */ 8,-14,4,127,-50,-9,7,-20,-35,19,7,-8,-18,-48,-23,-42, 
  /* [69][0][][] */ 80,94,22,127,44,7,71,-97,11,98,12,65,7,-16,17,-4, 
  /* [70][0][][] */ 65,-48,41,-56,64,-3,52,40,58,-50,25,-65,-8,127,26,119, 
  /* [71][0][][] */ 14,47,-2,89,41,-127,-35,96,33,-85,15,14,30,-48,-64,39, 
  /* [72][0][][] */ -127,-72,-29,39,26,25,-36,9,-60,-29,-83,36,70,9,10,88, 
  /* [73][0][][] */ -29,-14,13,54,8,-26,8,-17,55,20,15,-3,36,127,-54,-53, 
  /* [74][0][][] */ 63,-27,0,-43,-10,-57,20,-41,-61,-33,-122,19,-127,-38,64,62, 
  /* [75][0][][] */ -22,-12,-12,127,-32,18,-2,-8,-73,27,0,-22,3,-43,-17,-29, 
  /* [76][0][][] */ -11,0,-21,26,17,-4,-21,-127,5,-95,9,0,-27,-31,38,-19, 
  /* [77][0][][] */ 127,-21,18,35,-30,0,-30,1,30,0,-40,45,29,10,-44,42, 
  /* [78][0][][] */ -13,-18,57,24,-4,11,-45,54,38,-19,-39,-19,22,127,31,-26, 
  /* [79][0][][] */ -2,22,31,16,50,61,-63,-55,16,-48,78,-17,127,-14,-30,-36, 
  /* [80][0][][] */ -127,-75,-67,96,34,42,11,-2,-91,-16,-83,23,55,-54,-49,19, 
  /* [81][0][][] */ 59,8,-71,38,127,86,-29,-20,-13,-120,-6,-69,-25,-22,-100,9, 
  /* [82][0][][] */ 113,107,3,39,-127,-19,-66,-11,-56,-9,94,-55,-48,96,-4,-36, 
  /* [83][0][][] */ 127,38,13,-28,22,-4,-14,26,27,13,79,-31,-58,-33,-32,-81, 
  /* [84][0][][] */ -17,-66,-53,-18,68,28,9,-127,-16,-61,44,13,-21,-20,19,-51, 
  /* [85][0][][] */ -12,-29,-50,-61,-7,-26,77,79,7,127,-29,-54,39,67,81,-13, 
  /* [86][0][][] */ 109,-24,0,-11,-28,-49,-6,-28,-1,7,-127,-9,17,24,-16,41, 
  /* [87][0][][] */ -21,30,26,-29,-9,84,-40,67,-2,-34,38,20,1,-127,1,-3, 
  /* [88][0][][] */ -20,-10,-90,-40,65,3,-8,-127,15,-42,0,-30,-54,-23,35,-34, 
  /* [89][0][][] */ 6,-8,41,-127,64,13,-56,115,61,-81,51,12,-11,35,10,25, 
  /* [90][0][][] */ -13,32,-42,85,77,-6,118,-103,59,127,-44,60,3,-2,-27,-28, 
  /* [91][0][][] */ 55,-19,-37,-10,-14,-127,-11,-2,-4,3,-58,0,35,-10,-3,32, 
  /* [92][0][][] */ 8,27,127,46,44,46,-12,54,-41,7,-46,8,26,107,-13,-26, 
  /* [93][0][][] */ 119,-58,-54,-6,-21,-64,35,68,-35,49,-127,-15,14,35,-3,71, 
  /* [94][0][][] */ 23,-26,49,80,98,-23,-16,61,13,-16,-9,59,-1,127,-29,-65, 
  /* [95][0][][] */ -127,37,44,38,19,43,16,1,13,-6,121,2,-13,40,-17,-26, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00046644514077343047, 0.00070790736936032772, 0.00064992846455425024, 0.0029589782934635878, 0.0012589446268975735, 0.00058509374503046274, 0.00051823299145326018, 0.001840467331930995, 0.0011863824911415577, 0.00026417398476041853, 0.00069434696342796087, 0.00098500528838485479, 0.0015289693837985396, 0.00040724931750446558, 0.00066972797503694892, 0.0013405703939497471, 0.00093118310905992985, 0.00068458367604762316, 0.00072433456080034375, 0.0021527779754251242, 0.0013011685805395246, 0.00059662101557478309, 0.000771172228269279, 0.00056562799727544188, 0.00083067570813000202, 0.0013318450655788183, 0.0011782887158915401, 0.00058639072813093662, 0.0020328466780483723, 0.0011443527182564139, 0.00045966723700985312, 0.00053488340927287936, 0.00047611622721888125, 0.0017603873275220394, 0.00062880798941478133, 0.0016688528703525662, 0.00041779075399972498, 0.0011152045335620642, 0.0016801906749606133, 0.00058467587223276496, 0.0013839352177456021, 0.00054552860092371702, 0.0004251053323969245, 0.00062862032791599631, 0.00097957905381917953, 0.00067581736948341131, 0.00061551202088594437, 0.0011073495261371136, 0.0013168242294341326, 0.00089562352513894439, 0.0015217715408653021, 0.0024977759458124638, 0.0006017479463480413, 0.00082552898675203323, 0.0011913774069398642, 0.00043657163041643798, 0.0010978911304846406, 0.00077691063052043319, 0.0010474649025127292, 0.0012663387460634112, 0.0004120240337215364, 0.00058275903575122356, 0.00081423070514574647, 0.0009696384659036994, 0.00046867295168340206, 0.00084012182196602225, 0.0011200589360669255, 0.0015342170372605324, 0.00066850020084530115, 0.00058875640388578176, 0.00069078360684216022, 0.0011489124735817313, 0.00087386224186047912, 0.0014194844989106059, 0.00065599026856943965, 0.0015517316060140729, 0.00036915251985192299, 0.00090472621377557516, 0.000358677061740309, 0.0014893775805830956, 0.00082225230289623141, 0.0013350995723158121, 0.00065133336465805769, 0.0015395559603348374, 0.00073592684930190444, 0.00093649973860010505, 0.00072585575981065631, 0.0011556296376511455, 0.000426156708272174, 0.0012936333660036325, 0.00055493187392130494, 0.0014589102938771248, 0.00043695661588571966, 0.00031858374131843448, 0.00084604910807684064, 0.00081849837442860007, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -38531, 6111, 1377, -8289, 509, -5307, -10048, -44618, -489, 30728, 34415, -18387, -5293, -22548, 41495, -49283, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0007041984936222434, 0.0007073531742207706, 0.0011516258819028735, 0.0009389212355017662, 0.0009492912795394659, 0.0010572387836873531, 0.00099979725200682878, 0.00054043397540226579, 0.00064613204449415207, 0.00061375065706670284, 0.00093241885770112276, 0.00047808338422328234, 0.00092803401639685035, 0.0011949992040172219, 0.00058161985361948609, 0.00064557325094938278, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -17,-4,-21,6,20,-2,7,108,-54,19,43,-7,19,-14,-16,22,15,-10,-13,0,62,-8,23,127,-21,86,-7,-10,33,-16,21,-28,-18,50,16,-44,20,41,17,-9,-107,-23,21,43,38,22,-125,-47, 
  /* [1][0][][] */ -35,-14,22,15,-29,10,-4,53,-52,-37,0,-49,-19,-25,1,-7,-23,127,-11,26,4,7,-24,-17,27,-47,16,26,-25,-91,-35,22,-23,-5,31,-3,-11,-38,-1,10,-12,-29,127,17,10,1,26,-9, 
  /* [2][0][][] */ -19,-8,-12,-34,-1,-63,3,-22,4,17,12,24,16,12,-18,6,0,-17,-19,-8,-2,-3,0,-127,-9,75,-10,8,4,-22,-6,-3,-8,51,8,-2,22,14,25,1,-33,2,-24,-9,-5,-9,16,7, 
  /* [3][0][][] */ -7,32,5,-29,-4,-2,5,-3,-17,-9,-7,37,-127,3,-5,-2,1,3,-17,-1,-30,7,6,18,-9,-11,4,22,-9,17,7,20,0,0,19,22,-9,23,39,4,11,8,25,-28,6,-5,3,15, 
  /* [4][0][][] */ 37,-35,6,10,22,36,23,-27,-31,4,-9,-19,-1,6,3,12,26,-6,-81,4,-1,10,13,76,4,-35,4,54,9,-81,20,6,20,-37,30,-127,11,36,0,18,-16,21,5,-22,-11,-17,16,-1, 
  /* [5][0][][] */ 32,-3,-17,57,-2,-10,8,29,-3,-3,41,6,4,57,-1,7,-24,21,29,-1,10,2,3,-23,-4,-52,3,-22,-6,-10,0,5,69,-127,2,34,-13,-15,16,10,-92,52,21,-4,-4,-6,-105,-8, 
  /* [6][0][][] */ 23,-4,10,6,-14,-4,8,-11,-5,4,-1,5,-16,12,-1,9,-2,-11,127,5,7,11,15,-34,-1,3,24,-13,-15,-3,-2,8,2,-9,29,-37,-1,-47,71,19,-2,-9,-5,5,-12,3,5,-11, 
  /* [7][0][][] */ -41,-9,-8,35,-15,72,4,54,3,32,-11,127,75,3,-13,5,-2,-28,-6,-6,-28,-3,-11,71,-5,-29,-42,-27,-14,-5,-13,-5,-3,3,-22,2,6,-61,100,-2,22,21,-63,-69,14,-13,-3,5, 
  /* [8][0][][] */ -51,-43,-2,6,-7,1,-4,36,-8,-67,7,43,40,11,16,8,-15,49,-30,6,-47,22,-7,-7,3,3,7,45,-8,116,-12,19,-1,6,-9,-127,-109,64,37,33,19,-2,109,-23,11,26,14,33, 
  /* [9][0][][] */ -18,8,1,30,19,-45,1,-3,69,-49,2,56,-58,20,16,9,-10,17,-38,-27,55,17,-10,-20,-4,16,51,-33,11,16,15,2,-20,30,86,-116,-10,-127,-108,11,-35,11,59,6,4,14,-18,-34, 
  /* [10][0][][] */ -20,-4,-33,-127,44,85,7,-16,0,34,24,7,45,-51,-34,17,33,-41,53,-30,29,-28,38,46,-45,-107,4,-33,43,32,42,-40,-31,-76,26,-5,13,-34,7,-39,-36,-64,-12,10,17,14,24,-36, 
  /* [11][0][][] */ -7,57,-12,72,35,-65,-80,-12,-6,76,-2,6,-14,66,-4,-76,19,38,12,-8,-52,-113,16,2,15,-35,24,-15,56,-35,16,-95,58,-28,-42,-100,104,22,17,-127,-7,73,100,-86,-9,-68,28,34, 
  /* [12][0][][] */ 123,5,-16,15,4,20,-1,103,17,-6,-59,-19,-6,11,-20,-4,-10,2,-4,-4,6,-2,-2,23,0,16,2,12,0,21,-10,12,4,-65,-10,7,-18,-15,-26,-5,-17,-75,9,-127,-51,-5,73,-6, 
  /* [13][0][][] */ 11,5,0,3,6,-10,3,2,-1,9,4,22,-6,5,2,2,5,0,10,5,14,-12,9,-2,-2,2,16,127,11,-2,6,-3,6,0,-38,21,10,-6,7,-12,-16,-4,3,2,-1,-3,-10,-14, 
  /* [14][0][][] */ 65,-21,46,-75,53,30,36,-102,-71,-54,0,121,-77,-8,71,10,46,21,-68,64,10,13,75,-19,29,58,-30,-116,26,-38,61,44,8,73,-127,-67,-35,46,96,7,-32,11,61,2,4,-5,12,-23, 
  /* [15][0][][] */ -7,-47,-86,-35,56,22,74,-47,-16,26,-18,-29,78,25,-96,69,55,47,72,-83,-103,-25,56,-9,-95,53,35,60,60,55,47,-58,27,62,105,127,-14,-121,-9,-29,97,62,122,-57,3,-40,-23,67, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.029928436502814293, 0.030062509700655937, 0.048944097012281418, 0.039904151111841202, 0.040344879031181335, 0.044932648539543152, 0.042491380125284195, 0.022968443110585213, 0.027460610494017601, 0.026084402576088905, 0.0396278016269207, 0.020318543538451195, 0.039441443979740143, 0.050787467509508133, 0.024718843400478363, 0.027436861768364906, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 4295, 33902, -966, 45197, 3989, 125595, -1870, 60301, 2247, 34516, 23681, -2655, 2122, 29280, 378, -2053, -635, 1962, 3493, -2323, 998, -2283, -1363, -22175, -4827, 47438, 129585, 101597, 4317, 430, -2306, 363, 20127, 1884, 24125, 412, 34466, -267, 66064, 1606, 742, 66648, 23, 6062, 42134, -236, 4481, 43486, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.9004549004603177e-05, 3.3812229958130047e-05, 0.00018623519281391054, 5.2238530770409852e-05, 0.00016351172234863043, 6.5708467445801944e-05, 0.00016049831174314022, 9.1452522610779852e-05, 9.6648866019677371e-05, 3.7032696127425879e-05, 5.3031457355245948e-05, 0.00012492045061662793, 4.262790025677532e-05, 4.3220861698500812e-05, 0.00015357894881162792, 0.00020253757247701287, 0.00018542160978540778, 7.7998876804485917e-05, 9.6575531642884016e-05, 0.00014659264707006514, 9.1022244305349886e-05, 0.00020841247169300914, 7.9144767369143665e-05, 0.000136314716655761, 0.00011231288954149932, 9.0404493676032871e-05, 2.9780690965708345e-05, 6.893969839438796e-05, 0.00012453936506062746, 0.00012673466699197888, 0.00010576033673714846, 0.0001443343935534358, 4.8913483624346554e-05, 0.00011832273594336584, 3.3187247026944533e-05, 5.3092215239303187e-05, 0.00016626951401121914, 0.0001000997654045932, 8.3401529991533607e-05, 9.4061069830786437e-05, 0.00011462804104667157, 8.5038591350894421e-05, 8.5917956312187016e-05, 7.5606418249662966e-05, 3.5449305869406089e-05, 0.00016921557835303247, 9.6150863100774586e-05, 3.2597072276985273e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-92,97,72,52,-34,107,-66,61,-89,-79,48,52,-43,-73,-90,100,79,49,77,68,-75,-83,53,-32,-41,-63,-65,-67,61,-62,-113,-14,42,67,64,-63,53,-52,-22,50,-73,57,62,-93,10,77,-34, 81,-96,127,85,-78,-69,-57,-86,95,-105,-63,74,80,-107,-97,91,-39,96,83,127,85,-116,53,71,-52,-77,-68,-79,54,78,-30,-127,-85,78,79,84,-80,84,-84,-16,75,-95,82,90,-74,-127,93,-104, 34,-47,69,37,19,-41,-47,-39,44,-32,4,35,30,-80,-54,-1,-54,39,36,70,34,-55,32,27,-27,-46,-43,-23,32,31,88,-90,-83,45,35,34,-29,40,-40,-10,40,-41,34,44,-5,-8,37,-73, 
  /* [0][1][][] */ 92,-110,-43,94,54,-82,127,-90,84,-115,-72,82,83,-109,-15,-127,127,109,75,-38,84,106,-127,73,72,-76,-93,-100,-127,86,-68,-8,-88,70,106,96,-84,79,-81,90,83,-102,86,91,-88,108,95,-92, 127,-127,-66,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-24,96,-65,127,127,-50,127,127,71,127,127,-127,-127,-127,52,127,-28,18,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 62,-80,-33,67,37,-62,-49,-62,58,-42,-60,58,49,-54,-17,11,-62,50,59,-31,57,63,51,66,65,-64,-60,-44,37,55,127,15,-62,70,49,50,-50,61,-61,56,61,-58,53,62,-62,-66,61,-57, 
  /* [0][2][][] */ 44,-48,-46,51,26,-53,63,-43,42,-73,-3,42,55,-73,82,-80,73,51,37,-29,26,-12,-78,30,-24,-44,-50,-49,-74,33,-40,92,-73,37,48,43,-27,38,-44,-86,47,-50,40,45,-22,16,40,-75, 71,-73,-49,82,-56,-63,-73,-68,52,-77,-65,62,73,-49,127,32,-47,58,63,-41,55,-18,41,68,-49,-66,-80,-63,30,62,-24,119,-56,64,57,58,-50,61,-67,-105,68,-69,60,63,-85,49,64,-53, 39,-40,-28,49,28,-19,-19,-34,16,-27,-51,30,31,2,67,24,-35,22,30,-31,28,-1,39,44,-26,-28,-49,-25,33,34,63,68,0,35,16,22,-23,29,-30,-54,29,-33,26,28,-64,10,34,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029326933436095715, 0.0014370196731761098, 0.0079149957746267319, 0.0022201375104486942, 0.0069492477923631668, 0.0027926098555326462, 0.0068211778998374939, 0.0038867322728037834, 0.0041075767949223518, 0.0015738895162940025, 0.002253836952149868, 0.005309118889272213, 0.0018116857390850782, 0.0018368866294622421, 0.0065271053463220596, 0.0086078466847538948, 0.007880418561398983, 0.0033149521332234144, 0.0041044601239264011, 0.0062301876023411751, 0.0038684452883899212, 0.0088575296103954315, 0.0033636526204645634, 0.0057933754287660122, 0.0047732978127896786, 0.0038421908393502235, 0.0012656793696805835, 0.0029299370944499969, 0.0052929231896996498, 0.0053862230852246284, 0.0044948142021894455, 0.0061342115513980389, 0.0020788230467587709, 0.0050287162885069847, 0.0014104580041021109, 0.0022564190439879894, 0.0070664542727172375, 0.0042542400769889355, 0.0035445650573819876, 0.0039975955151021481, 0.0048716915771365166, 0.0036141402088105679, 0.0036515130195766687, 0.003213272662833333, 0.001506595523096621, 0.007191662210971117, 0.0040864115580916405, 0.001385375508107245, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 683, 836, 1962, 576, 9665, 13291, 2317, -114, -604, -526, 912, 1152, 3321, 937, 21726, 2854, 1695, -1254, -217, 2546, -1753, 10784, 9587, 9917, 5176, 277, 3303, 3920, 8261, -483, 9632, 5404, 511, -56, 4491, 2973, -1688, 324, -647, 5763, 1067, -541, -854, 47, 915, 2973, 565, 924, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00040464597987011075, 0.00082785735139623284, 0.00029477363568730652, 0.00029793739668093622, 0.00022731987701263279, 0.00030270012211985886, 0.00047707633348181844, 0.00024310449953190982, 0.00043830834329128265, 0.00080267933662980795, 0.0011292551644146442, 0.0002923840656876564, 0.00038296516868285835, 0.00081722851609811187, 0.00016506925749126822, 0.00044181238627061248, 0.00029988880851306021, 0.00034289382165297866, 0.00022376482957042754, 0.00033816139330156147, 0.00033958928543142974, 0.00023673147370573133, 0.00038522412069141865, 0.00016129434516187757, 0.00031170310103334486, 0.00032553382334299386, 0.0021034376695752144, 0.00047563679981976748, 0.00021605224173981696, 0.00042970658978447318, 0.00026981459814123809, 0.00022024304780643433, 0.0007574711344204843, 0.00029212047229520977, 0.00082368217408657074, 0.00060949445469304919, 0.00082357658538967371, 0.00035385062801651657, 0.00025175869814120233, 0.00032232876401394606, 0.00017929876048583537, 0.00024865366867743433, 0.00032265955815091729, 0.00027107211644761264, 0.0021328113507479429, 0.00046714863856323063, 0.00039730296703055501, 0.0012374662328511477, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,-8,82,-39,50,26,-35, 
  /* [1][0][][] */ 23,62,44,20,20,-32,104,127, 
  /* [2][0][][] */ -33,3,-1,13,-127,-11,14,1, 
  /* [3][0][][] */ 95,-11,-6,-124,-127,15,39,-15, 
  /* [4][0][][] */ -127,53,-17,-24,82,-18,46,25, 
  /* [5][0][][] */ -95,-26,22,-13,-127,6,14,86, 
  /* [6][0][][] */ -11,-127,18,-12,9,4,0,36, 
  /* [7][0][][] */ -62,-5,6,101,127,-37,-39,4, 
  /* [8][0][][] */ 57,8,13,-127,5,-32,-52,-28, 
  /* [9][0][][] */ -8,-127,8,3,2,93,-44,91, 
  /* [10][0][][] */ -76,-2,0,18,-127,67,57,-26, 
  /* [11][0][][] */ 104,10,48,12,-56,-42,-35,-127, 
  /* [12][0][][] */ -1,15,39,-5,3,-83,127,66, 
  /* [13][0][][] */ 68,-27,-4,-12,95,127,91,-47, 
  /* [14][0][][] */ 127,33,-18,4,-89,-11,-18,-4, 
  /* [15][0][][] */ -21,-127,10,-14,-2,1,3,35, 
  /* [16][0][][] */ -41,-10,13,-1,-127,2,6,-5, 
  /* [17][0][][] */ -37,114,-108,7,17,-121,127,-92, 
  /* [18][0][][] */ 127,-38,-48,17,-75,26,15,127, 
  /* [19][0][][] */ 127,-63,-19,-5,43,1,23,12, 
  /* [20][0][][] */ 126,33,1,127,10,43,14,-73, 
  /* [21][0][][] */ 6,32,-66,-7,-18,87,-127,-83, 
  /* [22][0][][] */ -127,16,26,-8,-24,8,-53,-28, 
  /* [23][0][][] */ -38,-60,-4,24,-127,66,74,-19, 
  /* [24][0][][] */ 127,-17,-14,-10,-76,-6,-8,8, 
  /* [25][0][][] */ 23,-15,2,-23,127,51,50,-35, 
  /* [26][0][][] */ 4,-100,15,-32,7,-127,76,-55, 
  /* [27][0][][] */ -20,-127,30,-17,-2,-62,35,-5, 
  /* [28][0][][] */ -103,33,-26,26,0,-24,127,92, 
  /* [29][0][][] */ -15,44,10,7,-3,42,-108,-127, 
  /* [30][0][][] */ 127,-33,-8,22,-109,-2,-45,-20, 
  /* [31][0][][] */ 3,-23,72,-26,37,-113,127,55, 
  /* [32][0][][] */ -79,17,11,7,-127,-101,-99,56, 
  /* [33][0][][] */ -25,15,10,22,-127,-54,-44,17, 
  /* [34][0][][] */ 6,-127,42,-8,-5,80,-70,70, 
  /* [35][0][][] */ -23,-49,-127,-9,-4,-65,43,-53, 
  /* [36][0][][] */ 5,127,51,7,-14,17,-22,-38, 
  /* [37][0][][] */ -127,34,23,-20,67,-23,-3,-109, 
  /* [38][0][][] */ -127,-13,-41,-9,47,24,30,105, 
  /* [39][0][][] */ -14,-21,80,-7,23,-112,127,94, 
  /* [40][0][][] */ -27,-16,0,-42,-127,101,105,-33, 
  /* [41][0][][] */ -127,54,5,-68,-97,-98,-113,43, 
  /* [42][0][][] */ -47,-127,-95,-13,-6,79,-116,-90, 
  /* [43][0][][] */ -68,10,-19,-127,116,59,79,6, 
  /* [44][0][][] */ 127,-9,19,-83,35,-29,-16,40, 
  /* [45][0][][] */ -15,-127,-6,-9,-2,-61,61,9, 
  /* [46][0][][] */ 109,-7,-9,-18,127,-35,-30,8, 
  /* [47][0][][] */ 127,-5,-4,111,-4,17,16,-38, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00071414129342883825, 0.0014610477956011891, 0.00052023259922862053, 0.00052581616910174489, 0.00040118652395904064, 0.00053422170458361506, 0.00084197038086131215, 0.00042904409929178655, 0.00077355047687888145, 0.0014166123000904918, 0.0019929711706936359, 0.00051601533778011799, 0.0006758778472431004, 0.0014422894455492496, 0.00029132323106750846, 0.00077973463339731097, 0.00052926014177501202, 0.00060515775112435222, 0.0003949123783968389, 0.00059680570848286152, 0.00059932569274678826, 0.00041779663297347724, 0.0006798645481467247, 0.00028466107323765755, 0.00055011064978316426, 0.00057451985776424408, 0.0037122617941349745, 0.00083942979108542204, 0.00038130077882669866, 0.00075836962787434459, 0.00047618351527489722, 0.00038869696436449885, 0.001336826360784471, 0.00051555014215409756, 0.0014536792878061533, 0.0010756690753623843, 0.0014534929068759084, 0.00062449491815641522, 0.00044431746937334538, 0.00056886341189965606, 0.00031643622787669301, 0.0004388375673443079, 0.00056944717653095722, 0.00047840288607403636, 0.0037641020026057959, 0.00082444940926507115, 0.00070118193980306387, 0.0021839479450136423, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -39570, 28348, -14223, -16051, 22881, -5416, 32557, 44207, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00048928812611848116, 0.00071201962418854237, 0.0014177941484376788, 0.0016326949698850513, 0.0007930619758553803, 0.00062403501942753792, 0.0007703860173933208, 0.00097715109586715698, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -61,-12,-39,19,17,-15,-1,0,-115,127,-31,114,107,14,74,-12,-19,-29,-4,8,0,3,-22,-29,37,-95,21,62,-16,16,16,-34,-11,-75,125,6,2,-12,4,-16,107,-13,47,-15,-18,17,-8,-18, 
  /* [1][0][][] */ 4,30,127,2,-9,-24,2,-88,27,5,19,7,-26,8,-3,-126,13,-69,11,5,-32,32,24,-34,-17,-12,3,1,6,-7,16,-3,-4,15,19,19,-14,-35,66,-55,2,46,-13,26,-14,8,29,-6, 
  /* [2][0][][] */ 8,-47,14,-38,36,23,-7,-30,1,4,-4,18,-9,63,8,-5,-36,127,-28,-26,-17,22,-35,-9,126,-2,5,-7,-34,-10,2,-41,-8,-17,9,13,-5,-6,-19,6,17,-23,-16,0,3,23,-24,-36, 
  /* [3][0][][] */ 2,-84,-1,9,6,-5,-6,1,-8,-7,16,20,11,-6,51,3,-3,-20,2,23,-5,21,-21,6,10,48,-3,9,-11,2,127,0,11,7,0,4,-17,-14,-5,14,-8,9,-8,28,-3,2,0,34, 
  /* [4][0][][] */ -102,7,0,2,-2,-38,3,12,43,-45,19,-25,-28,-2,-14,-10,-9,-4,8,31,11,-26,8,-2,-13,49,6,98,14,1,-2,-24,9,-127,-31,7,-5,-1,-2,4,-54,-7,-17,20,-53,4,3,8, 
  /* [5][0][][] */ -25,29,18,3,-45,16,-2,49,18,11,9,11,-13,-45,11,37,4,-90,20,-1,37,-46,10,41,10,0,-86,-39,-43,-34,22,1,-4,-61,2,-60,67,10,-42,19,17,-40,4,5,127,-17,-38,-7, 
  /* [6][0][][] */ -24,-28,-14,-11,35,-32,0,-32,-11,-3,36,-17,-11,34,-1,-52,-3,6,3,-25,-47,47,-7,-86,-6,-8,-60,-67,35,44,-13,3,8,-60,-24,65,-72,-51,12,-68,-8,12,19,41,127,-29,41,13, 
  /* [7][0][][] */ 17,42,-76,34,-19,19,9,60,-10,-4,69,-34,14,-30,-6,-5,-15,-127,34,-38,62,52,18,-62,26,-24,32,3,-18,27,-13,12,1,36,-6,-27,-7,-53,-42,-69,-9,-39,44,66,-31,-18,-2,6, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020794745534658432, 0.030260832980275154, 0.060256250202655792, 0.06938953697681427, 0.033705133944749832, 0.026521487161517143, 0.032741405069828033, 0.041528921574354172, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52205, -189, 9394, -729, 5952, -3307, 1627, 17735, 279, 33769, -2118, 23004, -6045, -843, 23263, 1192, 293, 17897, 32506, 11627, -92, -471, 266, 9953, -7815, 26727, 45131, 34920, 3255, 257, -684, 1136, 1010, 16339, -6929, 16103, -11367, 24213, -22476, 115461, 15295, 20912, 10366, -1650, 15099, 2762, 1198, 214, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030854807118885219, 0.00026766376686282456, 0.00018107669893652201, 0.00025883005582727492, 0.00013670789485331625, 9.8596363386604935e-05, 0.0007354654953815043, 0.00019710203923750669, 0.00018859306874219328, 0.00014389309217222035, 9.8964665085077286e-05, 0.00018457083206158131, 0.00031785221653990448, 0.00023375313321594149, 0.00010399337770650163, 0.0012942119501531124, 0.00018111600365955383, 0.00022200153034646064, 7.1271162596531212e-05, 0.00014920432295184582, 0.00019665970467031002, 0.00022586958948522806, 0.00019625789718702435, 0.00019941660866606981, 0.00016498050536029041, 0.00013973384920973331, 0.00064417877001687884, 9.2957052402198315e-05, 0.00024242460494861007, 0.0028824936598539352, 9.1906091256532818e-05, 0.0001933573221322149, 0.00081726437201723456, 0.00016829952073749155, 0.00019022388732992113, 0.00015778656234033406, 0.00035574578214436769, 0.00011165950127178803, 0.00027243117801845074, 2.1325318812159821e-05, 0.00021520785230677575, 5.9505739045562223e-05, 0.00015544015332125127, 0.0001642358984099701, 0.00015112903201952577, 0.00010712164657888934, 0.0002136573166353628, 0.00011242828622926027, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,110,4,80,-1,28,17,8,8,8,-9,-10,-45,8,-2,8,-23,-115,-6,-21,127,-9,-2,6,-5,9,-6,4,16,98,20,29,39,-28,1,34,-2,2,17,-67,-9,-8,18,3,-7,-10, 127,9,14,-127,28,85,11,10,126,127,7,44,-51,-24,6,8,127,-56,-60,-58,-100,26,-110,15,18,70,-31,-83,22,21,9,-123,5,-59,127,10,-39,-47,-5,116,-79,-97,-30,3,-33,-8,-127,22, -32,-3,7,16,-1,64,3,17,29,9,-14,32,-15,-4,16,4,-104,28,-3,78,-31,-11,-18,-6,-4,-59,-2,30,-17,5,4,-22,8,-23,17,-19,0,47,41,-11,50,38,-16,11,-41,3,-1,-7, 
  /* [0][1][][] */ 126,7,0,-98,14,-28,35,-16,10,9,-13,54,-8,-1,18,-33,-1,-49,-59,-86,11,-72,-125,-18,6,98,-14,-127,-9,32,12,-107,17,-51,-2,127,-2,58,-41,42,-63,-127,39,-87,-44,-14,-13,-5, 28,-127,-127,115,-127,-127,-127,-127,-127,-95,127,-127,127,127,36,-127,-84,127,127,-107,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-28,-41,127,-127,127,127,127,-82,127,127,127,-120,103,105, 54,6,48,-13,5,-61,42,18,-23,14,-106,-8,-1,-41,127,5,62,-65,-71,87,14,-45,11,-33,2,6,-38,70,19,40,1,3,33,-43,10,66,-5,64,67,-9,-82,8,-85,-32,27,-16,-11,5, 
  /* [0][2][][] */ -54,-6,25,-16,7,32,-37,22,9,-24,11,33,6,-6,-38,18,4,22,-12,107,6,-31,-15,-12,-3,22,0,52,-10,4,47,-31,-18,-42,-32,-40,0,31,8,-22,10,-6,43,-36,-35,18,-11,17, 68,126,74,21,16,-22,122,35,19,-3,42,26,-4,-1,-89,25,-59,-56,-36,124,-37,50,12,19,31,-64,-40,31,76,1,127,22,87,-25,8,-36,-25,-17,-12,119,-27,-14,-41,45,21,-31,7,-127, -43,-3,6,-3,4,-7,-62,7,-18,-11,-41,-40,20,-10,-8,12,32,24,-8,-127,24,-9,5,-9,-7,8,-10,-54,-15,8,6,9,-19,87,-37,-23,-4,36,25,-61,5,7,-38,6,-41,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013113292865455151, 0.011375710368156433, 0.0076957596465945244, 0.011000276543200016, 0.0058100856840610504, 0.0041903452947735786, 0.031257282942533493, 0.0083768367767333984, 0.0080152051523327827, 0.0061154565773904324, 0.004205998033285141, 0.007844259962439537, 0.013508718460798264, 0.009934508241713047, 0.0044197184033691883, 0.055004004389047623, 0.0076974299736320972, 0.0094350650906562805, 0.0030290244612842798, 0.0063411835581064224, 0.0083580370992422104, 0.0095994574949145317, 0.008340960368514061, 0.0084752058610320091, 0.0070116715505719185, 0.0059386882930994034, 0.027377596125006676, 0.0039506745524704456, 0.010303045623004436, 0.12250597774982452, 0.0039060087874531746, 0.0082176858559250832, 0.034733735024929047, 0.0071527296677231789, 0.0080845151096582413, 0.0067059285938739777, 0.015119194984436035, 0.0047455285675823689, 0.011578325182199478, 0.00090632605133578181, 0.009146333672106266, 0.0025289938785135746, 0.0066062062978744507, 0.0069800256751477718, 0.0064229839481413364, 0.0045526698231697083, 0.0090804360806941986, 0.0047782021574676037, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 47940, 7079, 6822, 7695, 1405, 8938, -1813, -243, 963, 2210, 3406, 288, 2182, -765, 830, -2100, 4568, 12112, -250, 26035, 3836, 2493, 8297, -541, 3147, 5295, 25792, 10174, -73, -2633, 89, 1945, -2029, 8522, 2871, 7088, 7274, 4578, 23138, 1847, -889, 2672, 1105, 4238, 5161, 2404, -1567, 2628, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.9865141490008682e-05, 0.0003181004140060395, 0.000232462611165829, 0.00041949682054109871, 0.0015867226757109165, 0.00056763552129268646, 0.0010676328092813492, 0.00113051722291857, 0.00058251171140000224, 0.00061280472436919808, 0.00066360703203827143, 0.00046659042709507048, 0.00045174796832725406, 0.00056519993813708425, 0.00054684031056240201, 0.0017349249683320522, 0.00035628679324872792, 0.0003531979164108634, 0.0019880468025803566, 0.0001047946498147212, 0.00030810284079052508, 0.00039400762761943042, 0.0004811242688447237, 0.00093194923829287291, 0.00037972102290950716, 0.00022395892301574349, 0.00015624542720615864, 0.00036215886939316988, 0.00090349680976942182, 0.00099410687107592821, 0.00055501784663647413, 0.00042501167627051473, 0.0009719681111164391, 0.00025818299036473036, 0.00035684715840034187, 0.00026129026082344353, 0.00050569308223202825, 0.00030023441649973392, 0.00010180762183154002, 0.0024581977631896734, 0.00065679941326379776, 0.0010350042721256614, 0.00046213509631343186, 0.00034525571390986443, 0.00023692274407949299, 0.00044616189552471042, 0.00073924142634496093, 0.0010088908020406961, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,31,0,5,127,27,-46,-27, 
  /* [1][0][][] */ -4,4,0,127,8,-5,7,8, 
  /* [2][0][][] */ 30,-127,-12,42,-12,-60,82,6, 
  /* [3][0][][] */ 127,-24,-4,17,0,-29,29,1, 
  /* [4][0][][] */ 17,-44,127,-11,-17,-47,13,-101, 
  /* [5][0][][] */ 52,9,0,-10,127,9,-14,-8, 
  /* [6][0][][] */ -16,71,-16,127,24,55,-55,-52, 
  /* [7][0][][] */ -8,127,-3,2,4,-10,20,-3, 
  /* [8][0][][] */ 127,52,-5,-8,-36,-14,3,-45, 
  /* [9][0][][] */ -127,8,4,19,43,11,-16,2, 
  /* [10][0][][] */ -79,-5,19,127,39,30,-29,0, 
  /* [11][0][][] */ -127,10,10,-59,30,4,-37,-49, 
  /* [12][0][][] */ 127,35,-10,25,-51,-20,13,-44, 
  /* [13][0][][] */ -2,78,-127,-3,8,96,-80,68, 
  /* [14][0][][] */ -62,-24,-5,127,19,7,-22,-32, 
  /* [15][0][][] */ -3,127,2,-3,1,-14,10,-50, 
  /* [16][0][][] */ -9,-127,-8,22,-8,-106,104,-29, 
  /* [17][0][][] */ 30,127,1,-13,3,72,-86,-21, 
  /* [18][0][][] */ -16,44,-127,-2,16,70,-31,65, 
  /* [19][0][][] */ -62,17,-2,11,-127,3,25,22, 
  /* [20][0][][] */ -127,-22,-10,8,48,-26,51,9, 
  /* [21][0][][] */ -68,2,-16,-2,-127,1,14,-3, 
  /* [22][0][][] */ -127,-18,-6,0,71,-17,31,42, 
  /* [23][0][][] */ -23,-26,-8,-9,-2,87,-127,-95, 
  /* [24][0][][] */ -11,42,-127,4,13,44,-18,72, 
  /* [25][0][][] */ 80,-39,-13,127,-62,-23,5,-28, 
  /* [26][0][][] */ 10,-14,-2,5,-13,115,127,-34, 
  /* [27][0][][] */ 71,-19,-13,7,127,38,46,-19, 
  /* [28][0][][] */ -4,127,-64,9,6,92,-27,105, 
  /* [29][0][][] */ -3,11,-4,-6,-7,84,-127,-82, 
  /* [30][0][][] */ 2,-8,-1,-127,-6,0,-4,-13, 
  /* [31][0][][] */ -59,2,5,-1,-127,15,15,2, 
  /* [32][0][][] */ -17,22,13,-127,0,23,-96,-91, 
  /* [33][0][][] */ -60,-7,0,0,-127,40,41,3, 
  /* [34][0][][] */ -127,80,2,20,46,-26,2,9, 
  /* [35][0][][] */ -16,127,-26,-7,-3,-89,77,-42, 
  /* [36][0][][] */ -9,45,7,-28,3,100,-127,-25, 
  /* [37][0][][] */ 35,-61,-10,32,13,-127,113,-17, 
  /* [38][0][][] */ 9,-127,4,-2,17,79,-67,45, 
  /* [39][0][][] */ 1,-127,-13,-4,-4,-10,-48,-99, 
  /* [40][0][][] */ 121,40,14,-19,-36,71,-127,-94, 
  /* [41][0][][] */ 3,-120,8,-2,-11,80,-64,127, 
  /* [42][0][][] */ 41,1,16,-127,-44,6,4,-37, 
  /* [43][0][][] */ -98,-26,6,-127,62,8,-21,-6, 
  /* [44][0][][] */ 3,-25,6,22,-16,94,127,-11, 
  /* [45][0][][] */ -127,-41,-7,-10,23,-3,15,-8, 
  /* [46][0][][] */ 17,98,127,-4,-1,20,12,16, 
  /* [47][0][][] */ -2,0,8,127,3,5,5,3, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00022309314226731658, 0.00078969466267153621, 0.00057709601242095232, 0.0010414145654067397, 0.0039390907622873783, 0.0014091737102717161, 0.0026504332199692726, 0.0028065459337085485, 0.0014461042592301965, 0.0015213077422231436, 0.0016474260482937098, 0.0011583259329199791, 0.0011214790865778923, 0.001403127214871347, 0.0013575488701462746, 0.0043070078827440739, 0.00088449358008801937, 0.00087682536104694009, 0.0049353907816112041, 0.00026015614275820553, 0.0007648753235116601, 0.00097813678439706564, 0.0011944066500291228, 0.0023135943338274956, 0.00094266980886459351, 0.00055598531616851687, 0.00038788435631431639, 0.00089907122310250998, 0.0022429602686315775, 0.0024679028429090977, 0.0013778499560430646, 0.0010551053564995527, 0.0024129424709826708, 0.00064094772096723318, 0.00088588468497619033, 0.00064866157481446862, 0.0012553995475172997, 0.00074534170562401414, 0.0002527407486923039, 0.0061025563627481461, 0.0016305259196087718, 0.0025694319047033787, 0.0011472654296085238, 0.00085710856365039945, 0.00058816844830289483, 0.0011076114606112242, 0.001835190923884511, 0.0025046041700989008, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -3744, -26332, 24684, 22302, 2754, 2263, 37227, 7838, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0012237579794600606, 0.00064276205375790596, 0.0014041302492842078, 0.0012208772823214531, 0.0011116358218714595, 0.0012486868072301149, 0.0008489360916428268, 0.00064653315348550677, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -14,-4,9,-98,14,31,8,7,7,5,-1,-6,106,0,-1,10,0,-11,0,-3,83,-4,-5,4,33,39,11,6,9,5,7,-127,13,10,3,8,-27,2,-16,32,9,-25,-7,3,4,-6,8,5, 
  /* [1][0][][] */ -37,-6,2,-6,42,24,-29,79,21,5,-29,-19,13,0,19,33,0,44,15,-43,0,23,127,22,-30,-1,54,4,19,-5,17,-11,14,-8,-9,-20,7,-56,9,6,-12,-12,-80,-4,-35,10,-50,-92, 
  /* [2][0][][] */ -63,12,-4,10,46,-2,28,27,-10,54,11,-5,9,0,9,54,0,15,-127,21,0,15,8,-13,-31,4,42,4,10,29,25,7,3,-8,-10,-15,7,3,9,4,35,-6,-30,4,22,-58,27,16, 
  /* [3][0][][] */ -2,0,-7,8,-10,31,-3,-4,66,17,1,-5,28,0,-34,-6,0,4,-8,1,-3,7,8,-16,-10,-6,-10,-2,-12,-6,-5,-6,-43,48,-56,0,6,0,2,-127,1,8,0,-52,-2,-1,-2,10, 
  /* [4][0][][] */ 3,-5,78,33,-1,-20,-2,-9,2,-4,4,-12,-79,0,-11,3,0,2,2,3,67,-3,4,-5,-15,33,-2,53,-4,-2,-1,96,4,-1,1,-5,15,-13,-11,-17,-2,-127,2,5,-3,-3,-3,0, 
  /* [5][0][][] */ -7,44,4,-10,1,48,24,13,-19,32,6,53,24,0,-127,-3,0,16,-40,21,-11,13,-15,39,-21,-4,28,-3,-17,21,21,-20,52,29,-36,-2,6,16,-49,17,25,-13,-10,28,21,57,22,25, 
  /* [6][0][][] */ -21,-54,1,4,38,-42,-25,12,23,-22,-11,86,-3,0,-127,43,0,-12,46,-23,-2,2,26,-36,31,1,3,-7,43,-15,-10,-3,91,-33,25,1,-2,-9,-71,-23,-15,-15,-7,-25,-21,-82,-18,-26, 
  /* [7][0][][] */ -114,-25,-11,9,127,18,65,28,16,3,26,-34,-25,0,84,104,0,14,5,59,-10,5,-27,50,20,8,44,7,55,65,58,-4,-9,-15,-25,-26,5,26,35,36,68,7,-30,-9,59,5,64,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.052009712904691696, 0.027317386120557785, 0.059675533324480057, 0.051887281239032745, 0.047244522720575333, 0.053069189190864563, 0.036079782992601395, 0.027477657422423363, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 62631, 58550, 63114, 42232, 382, 14283, 2370, 25484, 25904, 20888, 28208, 12319, -45411, -127, 37184, 1011, -204, 36004, 2978, 1845, -15216, 7390, 48975, 30848, -24125, 31064, 39326, 21027, -2549, 16058, -7948, -52348, 12146, 96192, 30602, 1531, 53227, -408, 124484, -25087, 15200, -27240, 3920, 87261, -846, 65598, 1042, -22879, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.6020157798193395e-05, 6.7001397837884724e-05, 0.00012988921662326902, 0.00010877119348151609, 0.00017410441068932414, 0.0001702089502941817, 0.00014468096196651459, 6.669055437669158e-05, 8.784197416389361e-05, 3.2707066566217691e-05, 8.0733625509310514e-05, 2.5352994271088392e-05, 0.00016853424313012511, 0.005541567225009203, 6.9313929998315871e-05, 0.00025595159968361259, 0.0027484172023832798, 2.2347228878061287e-05, 9.068348299479112e-05, 0.00017685859347693622, 0.00011829019786091521, 0.00014660495799034834, 0.00011686280777212232, 4.0139511838788167e-05, 0.00010775194095913321, 8.7391934357583523e-05, 2.9609078410430811e-05, 4.6118086174828932e-05, 0.00030773403705097735, 6.2551494920626283e-05, 5.4733427532482892e-05, 0.00019045922090299428, 0.00020288329687900841, 1.0038145774160512e-05, 8.2084196037612855e-05, 0.00019324003369547427, 1.6681806300766766e-05, 0.00042211497202515602, 3.7647776480298489e-05, 8.8259723270311952e-05, 6.7655942984856665e-05, 0.00018710347649175674, 9.9712851806543767e-05, 9.7987312983605079e-06, 0.00014228404324967414, 8.9532812125980854e-05, 0.00020738747844006866, 0.00012567876547109336, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-23,-7,-17,7,-40,-79,-68,-27,-50,8,67,33,-71,115,-43,-113,-85,36,-6,0,-73,-110,-79,-35,-127,-62,-21,71,14,95,27,-127,-90,-7,55,18,48,-127,78,-77,-14,106,-108,-3,-35,-86,106, 75,12,-28,-28,57,-127,-127,-82,60,-75,-115,110,38,-82,0,62,-52,-114,59,7,11,-112,-127,-70,-4,-127,-119,-38,-54,21,-56,54,28,-127,64,84,13,73,-92,127,-127,6,125,-127,2,-23,-127,93, -32,44,6,-5,-65,-110,-59,-18,88,-8,-127,38,7,-71,-101,-11,-127,-26,27,11,-16,-78,-36,-24,-11,-29,-58,-11,-10,17,-25,11,106,-85,70,33,14,37,-6,17,-79,4,6,-80,-17,5,-55,14, 
  /* [0][1][][] */ -86,-127,-45,-44,-10,54,99,-106,-26,-107,-20,113,88,-64,28,-97,-121,-94,89,-77,42,-88,-101,-127,42,-118,-76,-40,127,-60,127,86,-43,-85,-14,85,-35,-77,-106,89,41,59,105,-109,-92,-118,82,120, 127,-82,-127,-127,127,41,94,-127,100,-127,-108,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-119,127,-98,-127,-127,-120,-127,-71,127,28,-111,127,127,-68,-127,-95,89,60,127,127,-117,-113,-127,125,127, -52,32,-62,-85,-120,-24,31,-38,127,-20,-75,34,54,-70,-26,-44,-37,-30,54,-72,55,-81,-38,-24,48,-4,-46,-60,15,-89,-35,22,30,-100,120,22,-36,-61,1,-14,36,54,11,-75,-58,-37,65,35, 
  /* [0][2][][] */ -61,-107,-34,-33,0,34,-6,-35,-37,-59,-16,59,76,-127,-127,-65,-43,-17,63,75,51,-34,-13,-58,33,-55,-11,-61,75,28,77,65,108,-27,-38,-10,-95,36,-18,30,9,38,14,-56,96,-78,3,31, 87,-74,-88,-84,81,19,6,-47,47,-71,-32,56,83,-26,16,92,-24,-31,77,118,81,-56,-18,-57,93,-68,-18,-103,-51,39,-45,111,-18,-48,67,6,-127,51,-15,-2,11,33,15,-66,127,-100,-12,42, -28,29,-42,-35,-80,-20,21,-12,58,-5,-13,32,30,-43,111,-30,-93,-5,30,59,73,-30,-1,-3,43,2,-4,-67,-14,27,-20,42,-89,-44,67,3,-20,22,26,-39,7,35,-5,-15,63,-35,-5,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0040808566845953465, 0.0028475592844188213, 0.0055202916264533997, 0.0046227755956351757, 0.0073994370177388191, 0.0072338804602622986, 0.00614894088357687, 0.0028343484736979008, 0.0037332838401198387, 0.0013900502817705274, 0.0034311790950596333, 0.0010775022674351931, 0.0071627050638198853, 0.23551659286022186, 0.0029458419885486364, 0.0108779426664114, 0.1168077290058136, 0.00094975723186507821, 0.0038540479727089405, 0.0075164902955293655, 0.0050273332744836807, 0.0062307105399668217, 0.004966669250279665, 0.0017059291712939739, 0.0045794574543833733, 0.0037141572684049606, 0.0012583858333528042, 0.0019600186496973038, 0.013078696094453335, 0.00265843840315938, 0.0023261706810444593, 0.0080945165827870369, 0.0086225401610136032, 0.00042662117630243301, 0.0034885781351476908, 0.0082127014175057411, 0.00070897676050662994, 0.017939886078238487, 0.0016000304603949189, 0.0037510381080210209, 0.0028753774240612984, 0.007951897569000721, 0.0042377961799502373, 0.00041644606972113252, 0.0060470718890428543, 0.0038051444571465254, 0.0088139679282903671, 0.0053413473069667816, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3883, 127, 7921, 5962, 6662, 6814, 9132, -24, 71, -294, 2204, 384, 11507, -75247840, 2364, 19063, -60743960, -94, -471, 10064, 3673, -13, -11, 398, 3289, -734, 52, 597, 4160, 1616, 2388, 15084, 3702, 301, 290, -1588, 301, 3072, -120, 11140, 1966, 10741, -281, -78, 13629, 166, 7797, 3867, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00054164259927347302, 0.00051566999172791839, 0.00039863446727395058, 0.00031132987351156771, 0.00030113011598587036, 0.00030701456125825644, 0.00041411269921809435, 0.0017053564079105854, 0.00041273952228948474, 0.0025139451026916504, 0.00067880243295803666, 0.002085225423797965, 0.00019058326142840087, 2.1553263618301344e-09, 0.0011134407250210643, 0.00017374694289173931, 2.1553263618301344e-09, 0.0072432504966855049, 0.00044071939191780984, 0.00038453674642369151, 0.00028916716109961271, 0.0050344900228083134, 0.00036953846574760973, 0.0016227930318564177, 0.0011463511036708951, 0.00072027451824396849, 0.0025699879042804241, 0.002158936345949769, 0.00027837636298500001, 0.0018152790144085884, 0.0012303766561672091, 0.00015826425806153566, 0.00020927282457705587, 0.010872277431190014, 0.00053467863472178578, 0.00074931757990270853, 0.0050823711790144444, 0.00041407579556107521, 0.0028579926583915949, 0.00031166180269792676, 0.0014336177846416831, 0.00020553736248984933, 0.00057060917606577277, 0.010551518760621548, 0.00036951078800484538, 0.00052802864229306579, 0.00035970701719634235, 0.00022796039411332458, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 13,-127,49,-48,27,-24,-47,25, 
  /* [1][0][][] */ 68,61,-26,-100,11,-17,-80,127, 
  /* [2][0][][] */ 18,-3,-40,111,42,127,43,83, 
  /* [3][0][][] */ 70,68,-83,127,-103,-3,-5,15, 
  /* [4][0][][] */ -42,-112,77,10,16,28,-47,-127, 
  /* [5][0][][] */ 26,4,-42,46,5,-39,37,127, 
  /* [6][0][][] */ 53,-15,-127,-69,113,26,53,-18, 
  /* [7][0][][] */ 127,18,21,-20,32,-6,88,-62, 
  /* [8][0][][] */ 29,-112,6,117,-1,31,3,-127, 
  /* [9][0][][] */ 106,-119,20,1,-15,10,-127,81, 
  /* [10][0][][] */ -122,-42,-127,19,-13,-1,-110,57, 
  /* [11][0][][] */ -23,-39,-9,-95,-127,-29,51,-15, 
  /* [12][0][][] */ 15,-4,-45,66,-74,-26,55,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -9,-27,-5,11,35,127,46,41, 
  /* [15][0][][] */ 44,1,23,-127,73,49,-66,69, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,22,127,25,-24,-11,21,20, 
  /* [18][0][][] */ 91,-127,22,34,-6,17,-112,3, 
  /* [19][0][][] */ -127,-4,41,86,-77,-87,-111,68, 
  /* [20][0][][] */ 39,26,-47,113,-22,-127,-3,68, 
  /* [21][0][][] */ 59,22,127,19,-15,-5,68,14, 
  /* [22][0][][] */ -85,-16,-127,9,7,15,-98,2, 
  /* [23][0][][] */ -98,127,-17,-18,9,-12,117,-80, 
  /* [24][0][][] */ 6,-57,-50,81,-9,-61,92,127, 
  /* [25][0][][] */ 10,49,32,23,127,104,-77,-46, 
  /* [26][0][][] */ -86,-27,-127,1,8,18,-90,0, 
  /* [27][0][][] */ 2,-32,-30,11,-34,127,58,37, 
  /* [28][0][][] */ -1,-18,-23,38,13,127,57,66, 
  /* [29][0][][] */ 99,34,127,-2,-16,-14,91,-11, 
  /* [30][0][][] */ -84,127,-29,-35,11,-3,114,-40, 
  /* [31][0][][] */ -40,-99,-33,-6,39,-72,127,103, 
  /* [32][0][][] */ 4,14,-55,122,-9,96,80,127, 
  /* [33][0][][] */ 2,67,-14,-116,11,-9,-16,127, 
  /* [34][0][][] */ -19,84,-6,-102,32,-9,14,127, 
  /* [35][0][][] */ 127,7,-13,-43,-1,37,96,-40, 
  /* [36][0][][] */ -127,-14,24,67,-46,16,-118,85, 
  /* [37][0][][] */ -3,-22,-16,22,31,127,51,47, 
  /* [38][0][][] */ 12,29,10,88,127,-12,-23,31, 
  /* [39][0][][] */ 4,26,36,-117,23,-6,-44,127, 
  /* [40][0][][] */ 97,28,127,12,-8,-6,81,-6, 
  /* [41][0][][] */ -4,-37,-33,77,55,127,68,101, 
  /* [42][0][][] */ -78,-10,127,26,-34,22,-25,59, 
  /* [43][0][][] */ -12,-54,8,96,-18,8,15,-127, 
  /* [44][0][][] */ 41,4,-90,-124,93,-25,-6,-127, 
  /* [45][0][][] */ -95,127,-6,-57,8,-5,80,-53, 
  /* [46][0][][] */ -127,-26,37,26,-25,33,-99,47, 
  /* [47][0][][] */ 106,16,126,2,23,-14,127,-18, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00098938669543713331, 0.00094194407574832439, 0.00072816218016669154, 0.00056868797400966287, 0.00055005669128149748, 0.00056080549256876111, 0.00075643532909452915, 0.0031150744762271643, 0.00075392704457044601, 0.0045920759439468384, 0.0012399285333231091, 0.0038089586887508631, 0.00034812724334187806, 3.937008052901092e-09, 0.0020338566973805428, 0.00031737334211356938, 3.937008052901092e-09, 0.013230820186436176, 0.00080503622302785516, 0.00070241070352494717, 0.00052820466225966811, 0.0091962069272994995, 0.00067501422017812729, 0.0029642607551068068, 0.00209397217258811, 0.001315683126449585, 0.0046944459900259972, 0.0039436020888388157, 0.00050849374383687973, 0.0033158636651933193, 0.002247456694021821, 0.00028909201500937343, 0.00038226638571359217, 0.01985974982380867, 0.00097666610963642597, 0.0013687344035133719, 0.0092836692929267883, 0.00075636792462319136, 0.0052205272950232029, 0.00056929432321339846, 0.0026187053881585598, 0.00037544302176684141, 0.001042298274114728, 0.019273839890956879, 0.00067496363772079349, 0.00096451886929571629, 0.00065705570159479976, 0.00041640186100266874, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -2218, -43659, -7579, -13641, -29910, -2793, -24915, -25302, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0022084221709519625, 0.0022623373661190271, 0.0025164033286273479, 0.0011428939178586006, 0.001152693061158061, 0.0021256571635603905, 0.0015379211399704218, 0.0010265541495755315, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-23,7,-5,127,4,-2,2,-3,-124,-91,-6,0,124,-2,0, 
  /* [1][0][][] */ 0,-30,-1,87,76,18,22,6,1,-3,127,-42,0,28,-13,0, 
  /* [2][0][][] */ 0,-1,-2,-13,-56,5,13,-1,1,2,-17,0,0,127,-9,0, 
  /* [3][0][][] */ 0,-7,-15,-127,81,25,68,17,-1,62,-4,41,0,-2,20,0, 
  /* [4][0][][] */ 0,50,-30,37,-57,25,127,3,2,-60,22,-12,0,-4,10,0, 
  /* [5][0][][] */ 0,-15,-9,0,-22,-25,-13,16,0,11,-4,-43,0,-4,127,0, 
  /* [6][0][][] */ 0,17,0,5,47,-23,-27,-6,2,-114,116,67,0,127,63,0, 
  /* [7][0][][] */ 0,14,-9,127,5,-2,15,7,0,63,-59,75,0,-12,45,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.093857944011688232, 0.096149332821369171, 0.10694713890552521, 0.048572991043329239, 0.048989452421665192, 0.090340428054332733, 0.065361648797988892, 0.043628551065921783, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 33128, 24525, 11433, 11506, 109656, 13756, 107920, -9642, 6425, 29574, 14122, -445, 26278, 11542, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 7.9066929174587131e-05, 0.00016325137403327972, 0.00030241228523664176, 0.00016176712233573198, 3.0273316951934248e-05, 0.00037323968717828393, 3.6198245652485639e-05, 2.2260152036324143e-05, 0.00028332826332189143, 0.00020028366998303682, 0.00073603307828307152, 0.00072724185883998871, 0.0002482066338416189, 0.0001788749941624701, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,39,-67,80,-75,-91,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-24,91,-2,-73,66,-95,79,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,14,-29,15,-29,0,3,-109,-49,8,-30,-14, -78,-42,-57,-15,-8,-27,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,2,33,-25,34,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,69,2,-7,37,-39,54,-77,0,0,4,40,2,-27,23, 23,-4,32,-2,-27,39,-34,22,-125,-13,0,84,-58,0,-28,-111, 21,-7,19,0,4,13,9,24,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0033603445626795292, 0.0069381832145154476, 0.012852521613240242, 0.0068751024082303047, 0.0012866159668192267, 0.015862686559557915, 0.0015384254511445761, 0.00094605644699186087, 0.012041450478136539, 0.0085120555013418198, 0.031281404197216034, 0.030907778069376945, 0.010548781603574753, 0.0076021873392164707, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 15444, -104663, 7136, 276820, 24973, 25534, 11213, 280679, 26972, 24052, 874858, -1073741824, 48677, 32479, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00023231990053318441, 0.00019155384507030249, 4.1834278817987069e-05, 1.074630199582316e-05, 0.00024741110973991454, 0.00012314323976170272, 0.00042521106661297381, 6.881962235638639e-06, 4.7740166337462142e-05, 0.00012717075878754258, 6.7229420892545022e-06, 1.1533876076441629e-09, 8.1738726294133812e-05, 5.7775414461502805e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 42,-6,31, -8,-22,19, -127,-114,-61, 
  /* [1][1][][] */ 0,-5,3, -22,6,2, -1,-24,12, 
  /* [1][2][][] */ -5,20,6, -4,13,7, 39,-11,21, 
  /* [2][0][][] */ 25,-2,-1, 70,115,6, 41,-33,12, 
  /* [2][1][][] */ 6,14,4, 64,127,-22, 21,0,-2, 
  /* [2][2][][] */ 45,-63,21, 68,-42,-20, 30,-51,16, 
  /* [3][0][][] */ 11,32,5, 34,92,22, 1,6,-4, 
  /* [3][1][][] */ 23,27,4, 70,127,29, -10,-15,5, 
  /* [3][2][][] */ 7,0,0, 29,26,7, 2,-2,3, 
  /* [4][0][][] */ 52,90,-15, 26,93,-18, -3,18,-6, 
  /* [4][1][][] */ 48,85,39, 37,119,18, 44,64,-23, 
  /* [4][2][][] */ 63,81,25, 56,127,0, -9,34,20, 
  /* [5][0][][] */ 13,8,-110, 0,8,-94, 1,40,-18, 
  /* [5][1][][] */ 8,-37,-127, 0,-38,-111, 2,21,-19, 
  /* [5][2][][] */ -1,7,-23, 2,-3,-18, 1,14,-14, 
  /* [6][0][][] */ 25,-63,34, 49,-86,41, 11,-20,8, 
  /* [6][1][][] */ 37,-96,63, 65,-127,73, 8,-29,16, 
  /* [6][2][][] */ 22,-34,14, 15,-43,26, -11,8,-2, 
  /* [7][0][][] */ -33,26,12, -111,-32,8, -27,30,8, 
  /* [7][1][][] */ -12,4,11, -127,-84,1, -5,4,13, 
  /* [7][2][][] */ -23,42,1, -12,21,9, -18,36,7, 
  /* [8][0][][] */ -22,-53,-120, -28,-51,-116, -34,-60,-110, 
  /* [8][1][][] */ -25,-24,-126, -31,-22,-123, -34,-19,-114, 
  /* [8][2][][] */ -33,-25,-127, -36,-24,-122, -38,-25,-117, 
  /* [9][0][][] */ -22,-6,9, -12,-4,7, 5,6,-3, 
  /* [9][1][][] */ 89,110,-7, 69,127,21, -7,22,30, 
  /* [9][2][][] */ -24,-23,14, 4,-27,1, 12,7,-17, 
  /* [10][0][][] */ -24,-84,-19, 34,94,19, -8,-13,-3, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -16,-27,-1, 
  /* [10][2][][] */ -31,-19,1, 37,23,-12, -8,-1,6, 
  /* [11][0][][] */ -18,-29,-1, 5,-47,5, 6,-107,-56, 
  /* [11][1][][] */ -52,-46,-20, -40,-68,-39, -18,-64,-57, 
  /* [11][2][][] */ -12,-48,-89, 119,127,60, -44,9,-55, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-19, -61,-111,-26, -9,-18,-7, 
  /* [13][1][][] */ 62,114,14, 58,127,23, 8,16,9, 
  /* [13][2][][] */ -8,-20,2, 1,-19,-3, 1,4,-6, 
  /* [14][0][][] */ 44,-5,-35, 76,-24,-48, 31,-8,-19, 
  /* [14][1][][] */ 89,-13,-69, 127,-35,-83, 59,-16,-36, 
  /* [14][2][][] */ 55,-7,-42, 74,-18,-49, 27,-4,-17, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.05924157053232193, 0.048846226185560226, 0.010667740367352962, 0.0027403067797422409, 0.063089832663536072, 0.03140152245759964, 0.10842881351709366, 0.0017549003241583705, 0.012173742055892944, 0.032428540289402008, 0.0017143500735983253, 2.9411381774480105e-07, 0.020843373611569405, 0.014732729643583298, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.54745286703109741, } };
const TfArray<1, int> quant46_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.40281444787979126, } };
const TfArray<1, int> quant50_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.46154868602752686, } };
const TfArray<1, int> quant53_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.56661891937255859, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28932854533195496, } };
const TfArray<1, int> quant58_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23250469565391541, } };
const TfArray<1, int> quant61_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.30298665165901184, } };
const TfArray<1, int> quant62_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.25620245933532715, } };
const TfArray<1, int> quant65_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.42568713426589966, } };
const TfArray<1, int> quant66_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.073682524263858795, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13130071759223938, } };
const TfArray<1, int> quant69_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
